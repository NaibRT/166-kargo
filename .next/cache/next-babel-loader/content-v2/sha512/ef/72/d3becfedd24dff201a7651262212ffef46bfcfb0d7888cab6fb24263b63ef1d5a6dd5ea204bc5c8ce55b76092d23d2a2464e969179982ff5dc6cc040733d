{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/naibtahmazli/Documents/166kargo/pages/forgetPass.js\",\n    _s = $RefreshSig$();\n\nimport Link from 'next/link';\nimport React, { memo, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ButtonComponent from '../components/button';\nimport Card from '../components/card/card';\nimport FromGroup from '../components/form-group/form-group';\nimport Input from '../components/input/input';\nimport Page from \"../components/page/page\";\nimport { Login } from '../redux/entry/entryActions';\n\nfunction ForgetPassword(props) {\n  _s();\n\n  var _errors$password, _errors$password_conf;\n\n  var _useIntl = useIntl(),\n      f = _useIntl.formatMessage;\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      reset = _useForm.reset,\n      watch = _useForm.watch,\n      setError = _useForm.setError,\n      clearErrors = _useForm.clearErrors;\n\n  var password = useRef({});\n  password.current = watch(\"password\", '');\n  useEffect(function () {\n    clearErrors();\n\n    for (var key in props.Entry.errorMessages.errors) {\n      setError(key, {\n        message: props.Entry.errorMessages.errors[key].join('\\n')\n      });\n    }\n  }, []); //   useEffect(() => {\n  //     if(props.Entry.isLoged){\n  //       router.push('/packages');\n  //     }\n  //   },[props.Entry.isLoged])\n\n  var submit = function submit(data) {\n    props.Login('auth/login', JSON.stringify(data), {\n      'content-type': 'application/json'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    className: \"h-100\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"login-card bg-white p-sm w-50 mt-lg\",\n      style: {\n        display: 'block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        style: {\n          textAlign: 'center'\n        },\n        text: f({\n          id: 'signin'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"p-none\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"login-form\",\n          onSubmit: handleSubmit(submit),\n          children: [/*#__PURE__*/_jsxDEV(FromGroup, {\n            label: f({\n              id: 'password'\n            }),\n            bodyClass: \"bg-bg\",\n            className: \"w-50 pr-xs\",\n            error: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              name: \"password\",\n              type: \"password\",\n              Ref: register({\n                required: {\n                  value: true,\n                  message: f({\n                    id: 'pass-requir'\n                  })\n                },\n                pattern: {\n                  value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n                  message: f({\n                    id: 'password-pattern'\n                  })\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n            label: f({\n              id: 'repeat-pass'\n            }),\n            bodyClass: \"bg-bg\",\n            className: \"w-50 pr-xs mb-xs\",\n            error: (_errors$password_conf = errors.password_confirmation) === null || _errors$password_conf === void 0 ? void 0 : _errors$password_conf.message,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              name: \"password_confirmation\",\n              type: \"password\",\n              Ref: register({\n                required: {\n                  value: true,\n                  message: f({\n                    id: 'repeatpas-requir'\n                  })\n                },\n                validate: function validate(value) {\n                  return value === password.current || f({\n                    id: 'repeatpas-valid'\n                  });\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(ButtonComponent, {\n            type: \"submit\",\n            className: \"w-100 mt-xs mb-sm\",\n            label: f({\n              id: 'send'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-xs\",\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: f({\n              id: 'no-account'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/register\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"color-yellow\",\n                style: {\n                  cursor: 'pointer'\n                },\n                children: f({\n                  id: 'signup'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 18\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ForgetPassword, \"whQ3IaaxwPJLmxsOQgduPkp42kI=\", false, function () {\n  return [useIntl, useForm];\n});\n\n_c = ForgetPassword;\nvar mapDispatchToProp = {\n  Login: Login\n};\n\nvar mapStateToProp = function mapStateToProp(state) {\n  return {\n    Entry: state.entry\n  };\n};\n\nexport default connect(mapStateToProp, mapDispatchToProp)( /*#__PURE__*/memo(LoginPage));\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgetPassword\");","map":{"version":3,"sources":["/Users/naibtahmazli/Documents/166kargo/pages/forgetPass.js"],"names":["Link","React","memo","useEffect","useForm","useIntl","connect","ButtonComponent","Card","FromGroup","Input","Page","Login","ForgetPassword","props","f","formatMessage","register","handleSubmit","errors","reset","watch","setError","clearErrors","password","useRef","current","key","Entry","errorMessages","message","join","submit","data","JSON","stringify","display","textAlign","id","required","value","pattern","password_confirmation","validate","justifyContent","cursor","mapDispatchToProp","mapStateToProp","state","entry","LoginPage"],"mappings":"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","sourcesContent":["import Link from 'next/link';\nimport React, { memo, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ButtonComponent from '../components/button';\nimport Card from '../components/card/card';\nimport FromGroup from '../components/form-group/form-group';\nimport Input from '../components/input/input';\nimport Page from \"../components/page/page\";\nimport { Login } from '../redux/entry/entryActions';\n\n\nfunction ForgetPassword(props) {\n\n    const { formatMessage: f } = useIntl(); \n    const {register,handleSubmit,errors,reset,watch,setError,clearErrors} = useForm();\n\n    const password = useRef({});\n    password.current = watch(\"password\",'');\n\n\n      useEffect(() => {\n         clearErrors();\n         for(let key in props.Entry.errorMessages.errors){\n           setError(key,{message: props.Entry.errorMessages.errors[key].join('\\n')})\n         }\n      },[])\n\n    //   useEffect(() => {\n    //     if(props.Entry.isLoged){\n    //       router.push('/packages');\n    //     }\n    //   },[props.Entry.isLoged])\n    \n      const submit = (data) => {\n        props.Login('auth/login',JSON.stringify(data),{'content-type':'application/json'});\n      }\n\n    return (\n        <Page className='h-100'>\n           <Card className='login-card bg-white p-sm w-50 mt-lg' style={{display:'block'}}>\n             <Card.Header style={{textAlign:'center'}} text={f({ id: 'signin' })}/>\n             <Card.Body className='p-none'>\n             <form className='login-form' onSubmit={handleSubmit(submit)}>\n\n             <FromGroup label={f({id:'password'})} bodyClass='bg-bg' className='w-50 pr-xs'\n           error={errors.password?.message}\n         >\n           <Input name='password' type='password' \n             Ref={register({\n               required:{value:true,message:f({id:'pass-requir'})},\n               pattern:{value:/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, message:f({id:'password-pattern'})}\n             })}\n           />\n         </FromGroup>\n         <FromGroup label={f({id:'repeat-pass'})} bodyClass='bg-bg' className='w-50 pr-xs mb-xs'\n           error={errors.password_confirmation?.message} \n         >\n           <Input name='password_confirmation' type='password'\n              Ref={register({\n                required:{value:true,message:f({id:'repeatpas-requir'})},\n                validate: value => \n                  value === password.current || f({id:'repeatpas-valid'})\n              })}\n           />\n         </FromGroup>\n             <ButtonComponent type='submit' className='w-100 mt-xs mb-sm' label={f({id:'send'})}/>\n             </form>\n             <div className='mt-xs' style={{display:'flex',justifyContent:'space-between'}}>\n             <span>{f({id:'no-account'})}</span>\n             <Link href='/register'>\n                 <a>\n                 <span className='color-yellow' style={{cursor:'pointer'}}>{f({id:'signup'})}</span>\n                 </a>\n                 </Link></div>\n             </Card.Body>\n           </Card> \n        </Page>\n    )\n}\n\nconst mapDispatchToProp = { \n    Login\n  }\n  const mapStateToProp = state => ({\n    Entry: state.entry\n  });\nexport default connect(mapStateToProp, mapDispatchToProp)(memo(LoginPage))\n"]},"metadata":{},"sourceType":"module"}