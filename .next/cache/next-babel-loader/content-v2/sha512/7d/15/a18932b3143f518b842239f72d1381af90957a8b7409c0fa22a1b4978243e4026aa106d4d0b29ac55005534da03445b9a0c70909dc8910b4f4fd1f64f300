{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport React, { memo, useEffect, useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport AsideMenu from \"../components/aside-menu/index\";\nimport Aside from '../components/aside/aside';\nimport ButtonComponent from \"../components/button/index\";\nimport Card from \"../components/card/card\";\nimport FromGroup from \"../components/form-group/form-group\";\nimport Input from \"../components/input/input\";\nimport Main from '../components/main/main';\nimport Page from \"../components/page/page\";\nimport RadioButton from \"../components/radio-button/radio-button\";\nimport Redirect from \"../components/redirect/redirect\";\nimport Selectbox from \"../components/selectbox/selectbox\";\nimport { UpdateUser } from \"../redux/entry/entryActions\";\nconst telData = [{\n  id: '+994',\n  name: '+994'\n}];\n\nfunction UserInfo(props) {\n  var _uErrors$firstname, _uErrors$lastname, _uErrors$email, _uErrors$phone, _uErrors$serial, _uErrors$fin, _uErrors$nationality, _uErrors$birthday, _uErrors$address, _errors$old_password, _errors$new_password, _errors$new_password_;\n\n  if (!props.entry.isLoged) {\n    return /*#__PURE__*/_jsx(Redirect, {});\n  }\n\n  const {\n    0: checkSerial,\n    1: setCheckSerial\n  } = useState('AA');\n  const {\n    0: user,\n    1: setUser\n  } = useState(_objectSpread(_objectSpread({}, props.entry.user.user), {}, {\n    phone: props.entry.user.user.phone.slice(4)\n  }));\n  const {\n    locale,\n    locales,\n    defaultLocale\n  } = useRouter();\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch,\n    setError\n  } = useForm();\n  const {\n    register: uRegister,\n    errors: uErrors,\n    handleSubmit: uHandleSubmit,\n    setError: uSetError\n  } = useForm();\n  useEffect(() => {\n    for (let key in props.entry.errorMessages.errors) {\n      setError(key, {\n        message: props.entry.errorMessages.errors[key].join('\\n')\n      });\n      uSetError(key, {\n        message: props.entry.errorMessages.errors[key].join('\\n')\n      });\n    }\n  }, [props.entry.errorMessages]);\n  const password = useRef();\n  const phone = useRef();\n  password.current = watch('new_password', '');\n  phone.current = watch(\"phone_typ\", '');\n\n  const resetPassword = data => {\n    axios.put(`${process.env.NEXT_PUBLIC_API_URL}user/password?lan=${locale}`, data, {\n      headers: {\n        'content-type': 'application/json',\n        'accept': 'application/json',\n        'authorization': `Bearer ${props.entry.user.accessToken}`\n      }\n    }).then(async res => {\n      let data = await res;\n      Swal.fire({\n        title: 'Success!',\n        text: data.message,\n        icon: 'success',\n        confirmButtonText: 'OK'\n      });\n    }).catch(error => {\n      console.log(error);\n      Swal.fire({\n        title: 'Error!',\n        text: error.message,\n        icon: 'error',\n        confirmButtonText: 'OK'\n      });\n    });\n  };\n\n  const updateUserData = data => {\n    let newData = _objectSpread(_objectSpread({}, data), {}, {\n      phone: data.phone_typ + data.phone,\n      birthday: data.birthday.split('-').reverse().join('-')\n    });\n\n    props.UpdateUser(`user?lan=${locale}`, newData, {\n      'content-type': 'application/json',\n      'accept': 'application/json',\n      'authorization': `Bearer ${props.entry.user.accessToken}`\n    });\n  };\n\n  const handleChange = ev => {\n    let {\n      name,\n      value\n    } = ev.target;\n    setUser(_objectSpread(_objectSpread({}, user), {}, {\n      [name]: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(Page, {\n    className: \"user-profile-page bg-bg pt-lg pb-lg\",\n    children: [/*#__PURE__*/_jsx(Aside, {\n      className: \"mr-sm\",\n      children: /*#__PURE__*/_jsx(AsideMenu, {})\n    }), /*#__PURE__*/_jsxs(Main, {\n      className: \"mobile__color\",\n      children: [/*#__PURE__*/_jsxs(Card, {\n        className: \"bg-white p-sm br-lg\",\n        children: [/*#__PURE__*/_jsx(Card.Header, {\n          text: \"\\u015E\\u0259xsi melumatlar\"\n        }), /*#__PURE__*/_jsxs(\"form\", {\n          onSubmit: uHandleSubmit(updateUserData),\n          children: [/*#__PURE__*/_jsx(Card.Body, {\n            className: \"bg-bg\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"flex__column\",\n              style: {\n                display: 'flex',\n                flexWrap: 'wrap'\n              },\n              children: [/*#__PURE__*/_jsx(FromGroup, {\n                label: \"Ad\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$firstname = uErrors.firstname) === null || _uErrors$firstname === void 0 ? void 0 : _uErrors$firstname.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"text\",\n                  name: \"firstname\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'name is required'\n                    },\n                    pattern: {\n                      value: '',\n                      message: 'name only takes letters'\n                    }\n                  }),\n                  value: user.firstname,\n                  onChange: handleChange\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"Soyad\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$lastname = uErrors.lastname) === null || _uErrors$lastname === void 0 ? void 0 : _uErrors$lastname.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"text\",\n                  name: \"lastname\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'surname is required'\n                    },\n                    pattern: {\n                      value: '',\n                      message: 'surname only takes letters'\n                    }\n                  }),\n                  value: user.lastname,\n                  onChange: handleChange\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"E-mail\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$email = uErrors.email) === null || _uErrors$email === void 0 ? void 0 : _uErrors$email.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"email\",\n                  name: \"email\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'email is required'\n                    },\n                    pattern: {\n                      value: /^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$/,\n                      message: 'email only takes letters'\n                    }\n                  }),\n                  value: user.email,\n                  onChange: handleChange\n                })\n              }), /*#__PURE__*/_jsxs(FromGroup, {\n                label: \"Telefon\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$phone = uErrors.phone) === null || _uErrors$phone === void 0 ? void 0 : _uErrors$phone.message,\n                children: [/*#__PURE__*/_jsx(Selectbox, {\n                  className: \"bg-white\",\n                  data: telData,\n                  name: \"phone_typ\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'phone type is required'\n                    }\n                  }),\n                  value: user.phone_typ,\n                  onChange: handleChange\n                }), /*#__PURE__*/_jsx(Input, {\n                  type: \"tel\",\n                  name: \"phone\",\n                  maxLength: \"9\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'phone is required'\n                    },\n                    pattern: {\n                      value: /^\\(?(51|60|70|77|50|55)\\)?(\\s+)?[0-9]{3}-?[0-9]{2}-?[0-9]{2}$/,\n                      message: 'phone is not correct format'\n                    },\n                    maxLength: {\n                      value: 9,\n                      message: 'phone must be 9 digits'\n                    }\n                  }),\n                  value: user.phone,\n                  onChange: handleChange\n                })]\n              }), /*#__PURE__*/_jsxs(FromGroup, {\n                label: \"Sexsiyyet vesiqesinin seriya nomresi\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$serial = uErrors.serial) === null || _uErrors$serial === void 0 ? void 0 : _uErrors$serial.message,\n                children: [/*#__PURE__*/_jsx(Selectbox, {\n                  onChange: ev => {\n                    setCheckSerial(ev.target.value);\n                  },\n                  className: \"bg-white\",\n                  data: [{\n                    id: 'AA',\n                    name: 'AA'\n                  }, {\n                    id: 'AZE',\n                    name: 'AZE'\n                  }]\n                }), /*#__PURE__*/_jsx(Input, {\n                  type: \"text\",\n                  name: \"serial\",\n                  maxLength: checkSerial === 'AA' ? '7' : '8',\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'serial number is required'\n                    },\n                    maxLength: {\n                      value: checkSerial === 'AA' ? 7 : 8,\n                      message: 'serial number is not correct'\n                    }\n                  }),\n                  value: user.serial,\n                  onChange: handleChange\n                })]\n              }), /*#__PURE__*/_jsxs(FromGroup, {\n                label: \"Cins\",\n                bodyClass: \"\",\n                className: \"w-50 pr-xs\",\n                children: [/*#__PURE__*/_jsx(RadioButton, {\n                  text: \"Kisi\",\n                  name: \"gender\",\n                  id: \"male\",\n                  value: \"M\",\n                  Ref: uRegister(),\n                  checked: user.gender === 'M' ? true : false,\n                  onChange: handleChange\n                }), /*#__PURE__*/_jsx(RadioButton, {\n                  text: \"Qadin\",\n                  name: \"gender\",\n                  id: \"female\",\n                  value: \"F\",\n                  Ref: uRegister(),\n                  checked: user.gender === 'F' ? true : false,\n                  onChange: handleChange\n                })]\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"FIN\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$fin = uErrors.fin) === null || _uErrors$fin === void 0 ? void 0 : _uErrors$fin.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"text\",\n                  name: \"fin\",\n                  maxLength: \"7\",\n                  minLength: \"7\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'fin number is required'\n                    },\n                    maxLength: {\n                      value: 7,\n                      message: 'maximum 7 digits is required'\n                    },\n                    minLength: {\n                      value: 7,\n                      message: 'minimum 7 digits is required'\n                    }\n                  }),\n                  value: user.fin,\n                  onChange: handleChange\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"Milliy\\u0259t\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$nationality = uErrors.nationality) === null || _uErrors$nationality === void 0 ? void 0 : _uErrors$nationality.message,\n                children: /*#__PURE__*/_jsx(Selectbox, {\n                  data: [{\n                    id: 'Azerbaijan',\n                    name: 'Azerbaijan'\n                  }, {\n                    id: 'Foreign',\n                    name: 'Foreign'\n                  }],\n                  name: \"nationality\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'nationality is required'\n                    }\n                  }),\n                  value: user.nationality,\n                  onChange: handleChange\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"Do\\u011Fum tarixi\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$birthday = uErrors.birthday) === null || _uErrors$birthday === void 0 ? void 0 : _uErrors$birthday.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"date\",\n                  name: \"birthday\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'birthday is required'\n                    }\n                  }),\n                  value: user.birthday,\n                  onChange: handleChange\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"\\xDCnvan\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_uErrors$address = uErrors.address) === null || _uErrors$address === void 0 ? void 0 : _uErrors$address.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"text\",\n                  name: \"address\",\n                  Ref: uRegister({\n                    required: {\n                      value: true,\n                      message: 'address  is required'\n                    }\n                  }),\n                  value: user.address,\n                  onChange: handleChange\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(Card.Footer, {\n            className: \"mt-sm\",\n            style: {\n              justifyContent: 'flex-end'\n            },\n            children: /*#__PURE__*/_jsx(ButtonComponent, {\n              className: \"w-25\",\n              label: \"Melumati yenile\"\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Card, {\n        className: \"bg-white p-sm\",\n        children: [/*#__PURE__*/_jsx(Card.Header, {\n          text: \"Sifreni yenile\"\n        }), /*#__PURE__*/_jsxs(\"form\", {\n          onSubmit: handleSubmit(resetPassword),\n          children: [/*#__PURE__*/_jsx(Card.Body, {\n            className: \"bg-bg\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              style: {\n                display: 'flex',\n                flexWrap: 'wrap'\n              },\n              children: [/*#__PURE__*/_jsx(FromGroup, {\n                label: \"K\\xF6hn\\u0259 \\u015Fifr\\u0259\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$old_password = errors.old_password) === null || _errors$old_password === void 0 ? void 0 : _errors$old_password.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"password\",\n                  name: \"old_password\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'password is required'\n                    },\n                    pattern: {\n                      value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n                      message: 'password is not valid'\n                    }\n                  })\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"Yeni sifre\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$new_password = errors.new_password) === null || _errors$new_password === void 0 ? void 0 : _errors$new_password.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"password\",\n                  name: \"new_password\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'password is required'\n                    },\n                    pattern: {\n                      value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n                      message: 'password is not valid'\n                    }\n                  })\n                })\n              }), /*#__PURE__*/_jsx(FromGroup, {\n                label: \"Yeni sifreni terkrar\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$new_password_ = errors.new_password_confirmation) === null || _errors$new_password_ === void 0 ? void 0 : _errors$new_password_.message,\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"password\",\n                  name: \"new_password_confirmation\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'password is required'\n                    },\n                    validate: value => value === password.current || 'password is not match'\n                  })\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(Card.Footer, {\n            className: \"mt-sm\",\n            style: {\n              justifyContent: 'flex-end'\n            },\n            children: /*#__PURE__*/_jsx(ButtonComponent, {\n              className: \"w-25\",\n              label: \"Sifreni deyis\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n}\n\nconst mapStateToProps = state => ({\n  entry: state.entry\n});\n\nconst mapDispatchToProps = {\n  UpdateUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/memo(UserInfo));","map":null,"metadata":{},"sourceType":"module"}