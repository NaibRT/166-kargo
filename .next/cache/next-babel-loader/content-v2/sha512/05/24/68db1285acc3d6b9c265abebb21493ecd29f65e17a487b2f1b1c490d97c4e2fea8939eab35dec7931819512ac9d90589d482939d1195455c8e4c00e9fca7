{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { REHYDRATE } from \"redux-persist\";\nimport { INCREASE_BALANCE, LOGIN, LOGOUT, PAY_BY_BALANCE, REGISTER, UPDATE_USER } from \"./actionTypes\";\nconst initialState = {\n  user: {},\n  errorMessages: {},\n  isLoged: false\n};\n\nconst entryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case REHYDRATE:\n      break;\n\n    case LOGIN:\n      if (action.payload.isError) {\n        state = _objectSpread(_objectSpread({}, state), {}, {\n          errorMessages: _objectSpread({}, action.payload.errors)\n        });\n      } else {\n        state = _objectSpread(_objectSpread({}, state), {}, {\n          errorMessages: {},\n          user: _objectSpread({}, action.payload),\n          isLoged: true\n        });\n      }\n\n      break;\n\n    case LOGOUT:\n      state = {\n        user: {},\n        errorMessages: [],\n        isLoged: false\n      };\n      break;\n\n    case REGISTER:\n      if (action.payload.isError) {\n        state = _objectSpread(_objectSpread({}, state), {}, {\n          errorMessages: _objectSpread({}, action.payload.errors)\n        });\n      } else {\n        state = {\n          user: _objectSpread({}, action.payload),\n          errorMessages: {},\n          isLoged: false\n        };\n      }\n\n      break;\n\n    case UPDATE_USER:\n      if (action.payload.isError) {\n        state = _objectSpread(_objectSpread({}, state), {}, {\n          user: _objectSpread({}, state.user),\n          errorMessages: _objectSpread({}, action.payload.errors)\n        });\n      } else {\n        state = _objectSpread(_objectSpread({}, state), {}, {\n          user: _objectSpread(_objectSpread({}, state.user), {}, {\n            user: _objectSpread({}, action.payload.user)\n          }),\n          errorMessages: {}\n        });\n      }\n\n      break;\n\n    case INCREASE_BALANCE:\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          user: _objectSpread(_objectSpread({}, state.user.user), {}, {\n            balance: action.payload\n          })\n        })\n      });\n      break;\n\n    case PAY_BY_BALANCE:\n      console.log('worked', action.payload);\n      state = _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          user: _objectSpread(_objectSpread({}, state.user.user), {}, {\n            balance: state.user.user.balance - action.payload\n          })\n        })\n      });\n      break;\n\n    default:\n      state = _objectSpread({}, state);\n      break;\n  }\n\n  return state;\n};\n\nexport default entryReducer;","map":{"version":3,"sources":["/Users/naibtahmazli/Documents/166kargo/redux/entry/reducer.js"],"names":["REHYDRATE","INCREASE_BALANCE","LOGIN","LOGOUT","PAY_BY_BALANCE","REGISTER","UPDATE_USER","initialState","user","errorMessages","isLoged","entryReducer","state","action","type","payload","isError","errors","balance","console","log"],"mappings":"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","sourcesContent":["import { REHYDRATE } from \"redux-persist\";\nimport\n  {\n    INCREASE_BALANCE, LOGIN,\n    LOGOUT, PAY_BY_BALANCE, REGISTER,\n    UPDATE_USER\n  } from \"./actionTypes\";\n\nconst initialState = {\n  user: {},\n  errorMessages: {},\n  isLoged: false,\n};\n\nconst entryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case REHYDRATE:\n      break;\n    case LOGIN:\n      if (action.payload.isError) {\n        state = {\n          ...state,\n          errorMessages: { ...action.payload.errors },\n        };\n      } else {\n        state = {\n          ...state,\n          errorMessages: {},\n          user: {\n            ...action.payload,\n          },\n          isLoged: true,\n        };\n      }\n\n      break;\n    case LOGOUT:\n      state = {\n        user: {},\n        errorMessages: [],\n        isLoged: false,\n      };\n      break;\n    case REGISTER:\n      if (action.payload.isError) {\n        state = {\n          ...state,\n          errorMessages: { ...action.payload.errors },\n        };\n      } else {\n        state = {\n          user: { ...action.payload },\n          errorMessages: {},\n          isLoged: false,\n        };\n      }\n      break;\n    case UPDATE_USER:\n      if (action.payload.isError) {\n        state = {\n          ...state,\n          user: {\n            ...state.user,\n          },\n          errorMessages: { ...action.payload.errors },\n        };\n      } else {\n        state = {\n          ...state,\n          user: {\n            ...state.user,\n            user: { ...action.payload.user },\n          },\n          errorMessages: {},\n        };\n      }\n      break;\n    case INCREASE_BALANCE:\n      state = {\n        ...state,\n        user: { \n          ...state.user,\n          user: { \n            ...state.user.user,\n            balance:action.payload\n          }\n        }\n      }\n      break;\n    case PAY_BY_BALANCE:\n      console.log('worked',action.payload);\n      state = {\n        ...state,\n        user: { \n          ...state.user,\n          user: { \n            ...state.user.user,\n            balance:(state.user.user.balance - action.payload)\n          }\n        }\n      }\n      break;\n    default:\n      state = { ...state };\n      break;\n  }\n\n  return state;\n};\n\nexport default entryReducer;\n"]},"metadata":{},"sourceType":"module"}