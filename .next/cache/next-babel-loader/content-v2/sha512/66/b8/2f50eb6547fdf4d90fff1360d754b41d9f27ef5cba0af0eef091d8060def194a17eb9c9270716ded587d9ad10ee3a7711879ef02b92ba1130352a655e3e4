{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/naibtahmazli/Documents/166kargo/pages/user-info.js\";\nimport axios from \"axios\";\nimport router, { useRouter } from \"next/router\";\nimport React, { memo, useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport AsideMenu from \"../components/aside-menu/index\";\nimport Aside from '../components/aside/aside';\nimport ButtonComponent from \"../components/button/index\";\nimport Card from \"../components/card/card\";\nimport FromGroup from \"../components/form-group/form-group\";\nimport Input from \"../components/input/input\";\nimport Main from '../components/main/main';\nimport Page from \"../components/page/page\";\nimport RadioButton from \"../components/radio-button/radio-button\";\nimport Selectbox from \"../components/selectbox/selectbox\";\nconst telData = ['+994'];\n\nfunction UserInfo(props) {\n  var _errors$firstname, _errors$lastname, _errors$email, _errors$phone, _errors$serial, _errors$fin, _errors$nationality, _errors$birthday, _errors$address, _errors$old_password, _errors$new_password, _errors$new_password_;\n\n  if (!props.entry.isLoged) {\n    router.push('/register');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this);\n  }\n\n  const {\n    0: checkSerial,\n    1: setCheckSerial\n  } = useState('AA');\n  const {\n    locale,\n    locales,\n    defaultLocale\n  } = useRouter();\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = useForm();\n  const password = useRef();\n  password.current = watch('new_password', '');\n\n  const resetPassword = data => {\n    axios.put(`${process.env.NEXT_PUBLIC_API_URL}user/password?lan=${locale}`, data, {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': `bearer ${props.entry.user.accessToken}`\n      }\n    }).then(async res => {\n      let data = await res;\n      Swal.fire({\n        title: 'Success!',\n        text: data.message,\n        icon: 'success',\n        confirmButtonText: 'OK'\n      });\n    }).catch(error => {\n      console.log(error);\n      Swal.fire({\n        title: 'Error!',\n        text: error.message,\n        icon: 'error',\n        confirmButtonText: 'OK'\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    className: \"user-profile-page bg-bg pt-lg\",\n    children: [/*#__PURE__*/_jsxDEV(Aside, {\n      children: /*#__PURE__*/_jsxDEV(AsideMenu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        className: \"bg-white p-sm br-lg\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          text: \"Sexsi melumatlar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"bg-bg\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                flexWrap: 'wrap'\n              },\n              children: [/*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Ad\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$firstname = errors.firstname) === null || _errors$firstname === void 0 ? void 0 : _errors$firstname.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"firstname\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'name is required'\n                    },\n                    pattern: {\n                      value: '',\n                      message: 'name only takes letters'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Soyad\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$lastname = errors.lastname) === null || _errors$lastname === void 0 ? void 0 : _errors$lastname.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"lastname\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'surname is required'\n                    },\n                    pattern: {\n                      value: '',\n                      message: 'surname only takes letters'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"E-mail\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"email\",\n                  name: \"email\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'email is required'\n                    },\n                    pattern: {\n                      value: /^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$/,\n                      message: 'email only takes letters'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Telefon\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.message,\n                children: [/*#__PURE__*/_jsxDEV(Selectbox, {\n                  className: \"bg-white\",\n                  data: telData,\n                  name: \"phone_typ\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'phone type is required'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"tel\",\n                  name: \"phone\",\n                  maxLength: \"9\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'phone is required'\n                    },\n                    pattern: {\n                      value: /^\\(?(51|60|70|77|50|55)\\)?(\\s+)?[0-9]{3}-?[0-9]{2}-?[0-9]{2}$/,\n                      message: 'phone is not correct format'\n                    },\n                    maxLength: {\n                      value: 9,\n                      message: 'phone must be 9 digits'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Sexsiyyet vesiqesinin seriya nomresi\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$serial = errors.serial) === null || _errors$serial === void 0 ? void 0 : _errors$serial.message,\n                children: [/*#__PURE__*/_jsxDEV(Selectbox, {\n                  onChange: ev => {\n                    setCheckSerial(ev.target.value);\n                  },\n                  className: \"bg-white\",\n                  data: ['AA', 'AZE']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 20\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"serial\",\n                  maxLength: checkSerial === 'AA' ? '7' : '8',\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'serial number is required'\n                    },\n                    maxLength: {\n                      value: checkSerial === 'AA' ? 7 : 8,\n                      message: 'serial number is not correct'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Cins\",\n                bodyClass: \"\",\n                className: \"w-50 pr-xs\",\n                children: [/*#__PURE__*/_jsxDEV(RadioButton, {\n                  text: \"Kisi\",\n                  name: \"gender\",\n                  id: \"male\",\n                  value: \"M\",\n                  Ref: register()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(RadioButton, {\n                  text: \"Qadin\",\n                  name: \"gender\",\n                  id: \"female\",\n                  value: \"F\",\n                  Ref: register()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"FIN\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$fin = errors.fin) === null || _errors$fin === void 0 ? void 0 : _errors$fin.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"fin\",\n                  maxLength: \"7\",\n                  minLength: \"7\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'fin number is required'\n                    },\n                    maxLength: {\n                      value: 7,\n                      message: 'maximum 7 digits is required'\n                    },\n                    minLength: {\n                      value: 7,\n                      message: 'minimum 7 digits is required'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Ad\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$nationality = errors.nationality) === null || _errors$nationality === void 0 ? void 0 : _errors$nationality.message,\n                children: /*#__PURE__*/_jsxDEV(Selectbox, {\n                  data: ['Azerbaijan', 'Foreign'],\n                  name: \"nationality\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'nationality is required'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Ad\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$birthday = errors.birthday) === null || _errors$birthday === void 0 ? void 0 : _errors$birthday.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"date\",\n                  name: \"birthday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Unvan\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$address = errors.address) === null || _errors$address === void 0 ? void 0 : _errors$address.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"text\",\n                  name: \"address\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'address  is required'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            className: \"mt-sm\",\n            style: {\n              justifyContent: 'flex-end'\n            },\n            children: /*#__PURE__*/_jsxDEV(ButtonComponent, {\n              className: \"w-25\",\n              label: \"Melumati yenile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"bg-white p-sm\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          text: \"Sifreni yenile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(resetPassword),\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"bg-bg\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                flexWrap: 'wrap'\n              },\n              children: [/*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"K\\xF6hn\\u0259 \\u015Fifr\\u0259\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$old_password = errors.old_password) === null || _errors$old_password === void 0 ? void 0 : _errors$old_password.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"password\",\n                  name: \"old_password\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'password is required'\n                    },\n                    pattern: {\n                      value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n                      message: 'password is not valid'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Yeni sifre\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$new_password = errors.new_password) === null || _errors$new_password === void 0 ? void 0 : _errors$new_password.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"password\",\n                  name: \"new_password\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'password is required'\n                    },\n                    pattern: {\n                      value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n                      message: 'password is not valid'\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FromGroup, {\n                label: \"Yeni sifreni terkrar\",\n                bodyClass: \"bg-white\",\n                className: \"w-50 pr-xs\",\n                error: (_errors$new_password_ = errors.new_password_confirmation) === null || _errors$new_password_ === void 0 ? void 0 : _errors$new_password_.message,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  type: \"password\",\n                  name: \"new_password_confirmation\",\n                  Ref: register({\n                    required: {\n                      value: true,\n                      message: 'password is required'\n                    },\n                    validate: value => value === password.current || 'password is not match'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            className: \"mt-sm\",\n            style: {\n              justifyContent: 'flex-end'\n            },\n            children: /*#__PURE__*/_jsxDEV(ButtonComponent, {\n              className: \"w-25\",\n              label: \"Sifreni deyis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\nconst mapStateToProps = state => ({\n  entry: state.entry\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps)( /*#__PURE__*/memo(UserInfo));","map":{"version":3,"sources":["/Users/naibtahmazli/Documents/166kargo/pages/user-info.js"],"names":["axios","router","useRouter","React","memo","useRef","useState","useForm","connect","Swal","AsideMenu","Aside","ButtonComponent","Card","FromGroup","Input","Main","Page","RadioButton","Selectbox","telData","UserInfo","props","entry","isLoged","push","height","checkSerial","setCheckSerial","locale","locales","defaultLocale","register","errors","handleSubmit","watch","password","current","resetPassword","data","put","process","env","NEXT_PUBLIC_API_URL","headers","user","accessToken","then","res","fire","title","text","message","icon","confirmButtonText","catch","error","console","log","display","flexWrap","firstname","required","value","pattern","lastname","email","phone","maxLength","serial","ev","target","fin","minLength","nationality","birthday","address","justifyContent","old_password","new_password","new_password_confirmation","validate","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport router, { useRouter } from \"next/router\";\nimport React, { memo, useRef, useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport AsideMenu from \"../components/aside-menu/index\";\nimport Aside from '../components/aside/aside';\nimport ButtonComponent from \"../components/button/index\";\nimport Card from \"../components/card/card\";\nimport FromGroup from \"../components/form-group/form-group\";\nimport Input from \"../components/input/input\";\nimport Main from '../components/main/main';\nimport Page from \"../components/page/page\";\nimport RadioButton from \"../components/radio-button/radio-button\";\nimport Selectbox from \"../components/selectbox/selectbox\";\n\nconst telData = [\n  '+994'\n ]\n \nfunction UserInfo(props) {\n\n  if(!props.entry.isLoged){\n    router.push('/register');\n    return (\n        <div style={{height:'100vh'}}></div>\n    )\n  }\n  const [checkSerial, setCheckSerial] = useState('AA');\n  const { locale, locales, defaultLocale } = useRouter()\n  const {register,errors,handleSubmit,watch} = useForm();\n  \n  const password = useRef();\n  password.current = watch('new_password','');\n\n  const resetPassword = (data) => {\n    axios.put(`${process.env.NEXT_PUBLIC_API_URL}user/password?lan=${locale}`,data,{\n      headers: {\n          'content-type': 'application/json',\n          'authorization': `bearer ${props.entry.user.accessToken}`\n        }\n    })\n    .then(async res => {\n       let data = await res;\n       Swal.fire({\n         title: 'Success!',\n         text: data.message,\n         icon: 'success',\n         confirmButtonText: 'OK',\n       })\n    })\n    .catch(error => {\n      console.log(error)\n     Swal.fire({\n       title: 'Error!',\n       text: error.message,\n       icon: 'error',\n       confirmButtonText: 'OK',\n     })\n    })\n  }\n\n\n\n    return (\n        <Page className='user-profile-page bg-bg pt-lg'>\n            <Aside>\n              <AsideMenu/>\n            </Aside>\n         <Main>\n         <Card className='bg-white p-sm br-lg'>\n          <Card.Header text='Sexsi melumatlar'/>\n          <form>\n          <Card.Body className='bg-bg'>\n            <div style={{display:'flex',flexWrap:'wrap'}}>\n                <FromGroup label='Ad' bodyClass='bg-white' className='w-50 pr-xs'\n                 error={errors.firstname?.message}\n                >\n                  <Input type='text' name='firstname'\n                    Ref={register({\n                     required:{value:true, message:'name is required'},\n                     pattern:{value:'',message:'name only takes letters'}\n                   })}\n                  />\n                </FromGroup>\n                <FromGroup label='Soyad' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.lastname?.message}\n                >\n                  <Input type='text' name='lastname'\n                    Ref={register({\n                      required:{value:true, message:'surname is required'},\n                      pattern:{value:'',message:'surname only takes letters'}\n                    })}                  \n                  />\n                </FromGroup>\n                <FromGroup label='E-mail' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.email?.message}\n                >\n                  <Input type='email' name='email'\n                     Ref={register({\n                      required:{value:true, message:'email is required'},\n                      pattern:{value:/^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$/,message:'email only takes letters'}\n                    })}\n                  />\n                </FromGroup>\n                <FromGroup label='Telefon' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.phone?.message}\n                >\n                  <Selectbox className='bg-white' data={telData}\n                   name='phone_typ'\n                   Ref={register({\n                    required:{value:true, message:'phone type is required'},\n                  })} \n                  />\n                  <Input type='tel' name='phone'\n                    maxLength='9'\n                     Ref={register({\n                       required:{value:true, message:'phone is required'},\n                       pattern:{value:/^\\(?(51|60|70|77|50|55)\\)?(\\s+)?[0-9]{3}-?[0-9]{2}-?[0-9]{2}$/,message:'phone is not correct format'},\n                       maxLength:{value:9, message:'phone must be 9 digits'}\n                     })}\n                  />\n                </FromGroup>\n                <FromGroup label='Sexsiyyet vesiqesinin seriya nomresi' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.serial?.message}\n                >\n                   <Selectbox onChange={(ev)=>{\n                     setCheckSerial(ev.target.value)\n                   }} className='bg-white' data={['AA','AZE']}/>\n                  <Input type='text' name='serial'\n                     maxLength={checkSerial==='AA' ? '7' : '8'}\n                     Ref={register({\n                       required:{value:true, message:'serial number is required'},\n                       maxLength:{value: checkSerial==='AA' ? 7 : 8, message:'serial number is not correct'}\n                     })}\n                  />\n                </FromGroup>\n                 <FromGroup label='Cins' bodyClass=''  className='w-50 pr-xs'>\n                  <RadioButton text='Kisi' name='gender' id='male' value='M' \n                     Ref={register()} \n                  />\n                  <RadioButton text='Qadin' name='gender' id='female' value='F' \n                     Ref={register()} \n                  />\n                </FromGroup>\n                 <FromGroup label='FIN' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.fin?.message}\n                >\n                  <Input type='text' name='fin'\n                     maxLength='7'\n                     minLength='7'\n                     Ref={register({\n                       required:{value:true, message:'fin number is required'},\n                       maxLength:{value:7,message:'maximum 7 digits is required'},\n                       minLength:{value:7,message:'minimum 7 digits is required'}\n                     })} \n                  />\n                </FromGroup>\n\n                <FromGroup label='Ad' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.nationality?.message}\n                >\n                  <Selectbox data={['Azerbaijan','Foreign']} name='nationality'\n                      Ref={register({\n                       required:{value:true, message:'nationality is required'},\n                     })} \n                  />\n                </FromGroup>\n\n                <FromGroup label='Ad' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.birthday?.message}\n                >\n                  <Input type='date' name='birthday'/>\n                </FromGroup>\n                <FromGroup label='Unvan' bodyClass='bg-white' className='w-50 pr-xs'\n                error={errors.address?.message}\n                >\n                  <Input type='text' name='address'\n                    Ref={register({\n                      required:{value:true, message:'address  is required'},\n                    })}\n                  />\n                </FromGroup>\n            </div>\n          </Card.Body>\n          <Card.Footer className='mt-sm' style={{justifyContent:'flex-end'}}>\n              <ButtonComponent className='w-25'  label='Melumati yenile'/>\n            </Card.Footer>\n            </form>\n         </Card>\n\n         <Card className='bg-white p-sm'>\n          <Card.Header text='Sifreni yenile'/>\n          <form onSubmit={handleSubmit(resetPassword)}>\n          <Card.Body className='bg-bg'>\n            <div style={{display:'flex',flexWrap:'wrap'}}>\n                <FromGroup label='Köhnə şifrə' bodyClass='bg-white' className='w-50 pr-xs'\n                  error={errors.old_password?.message}\n                >\n                  <Input type='password' name='old_password'\n                     Ref={register({\n                      required:{value:true,message:'password is required'},\n                      pattern:{value:/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, message:'password is not valid'}\n                    })}\n                  />\n                </FromGroup>\n                <FromGroup label='Yeni sifre' bodyClass='bg-white' className='w-50 pr-xs'\n                  error={errors.new_password?.message}\n                >\n                  <Input type='password' name='new_password'\n                     Ref={register({\n                      required:{value:true,message:'password is required'},\n                      pattern:{value:/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, message:'password is not valid'}\n                    })}\n                  />\n                </FromGroup>\n                <FromGroup label='Yeni sifreni terkrar' bodyClass='bg-white' className='w-50 pr-xs'\n                  error={errors.new_password_confirmation?.message}\n\n                >\n                  <Input type='password' name='new_password_confirmation'\n                     Ref={register({\n                      required:{value:true,message:'password is required'},\n                      validate: value =>\n                        value === password.current || 'password is not match'\n                    })}\n                  />\n                </FromGroup>\n            </div>\n          </Card.Body>\n          <Card.Footer className='mt-sm' style={{justifyContent:'flex-end'}}>\n              <ButtonComponent className='w-25' label='Sifreni deyis'/>\n            </Card.Footer>\n          </form>\n         </Card>\n            </Main>\n        </Page>\n    )\n}\n\nconst mapStateToProps = state => ({\n  entry: state.entry\n});\n\nconst mapDispatchToProps = {\n\n}\nexport default connect(mapStateToProps)(memo(UserInfo))\n"]},"metadata":{},"sourceType":"module"}