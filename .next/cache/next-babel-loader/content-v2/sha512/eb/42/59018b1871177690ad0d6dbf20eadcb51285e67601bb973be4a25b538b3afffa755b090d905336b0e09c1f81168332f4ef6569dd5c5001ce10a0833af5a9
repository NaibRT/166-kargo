{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Link from 'next/link';\nimport React, { memo, useEffect, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ButtonComponent from '../components/button';\nimport Card from '../components/card/card';\nimport FromGroup from '../components/form-group/form-group';\nimport Input from '../components/input/input';\nimport Page from \"../components/page/page\";\nimport { Login } from '../redux/entry/entryActions';\n\nfunction ForgetPassword(props) {\n  var _errors$password, _errors$password_conf;\n\n  var _useIntl = useIntl(),\n      f = _useIntl.formatMessage;\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      reset = _useForm.reset,\n      watch = _useForm.watch,\n      setError = _useForm.setError,\n      clearErrors = _useForm.clearErrors;\n\n  var password = useRef({});\n  password.current = watch(\"password\", '');\n  useEffect(function () {\n    clearErrors();\n\n    for (var key in props.Entry.errorMessages.errors) {\n      setError(key, {\n        message: props.Entry.errorMessages.errors[key].join('\\n')\n      });\n    }\n  }, []); //   useEffect(() => {\n  //     if(props.Entry.isLoged){\n  //       router.push('/packages');\n  //     }\n  //   },[props.Entry.isLoged])\n\n  var submit = function submit(data) {\n    props.Login('auth/login', JSON.stringify(data), {\n      'content-type': 'application/json'\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    className: \"h-100\",\n    children: /*#__PURE__*/_jsxs(Card, {\n      className: \"login-card bg-white p-sm w-50 mt-lg\",\n      style: {\n        display: 'block'\n      },\n      children: [/*#__PURE__*/_jsx(Card.Header, {\n        style: {\n          textAlign: 'center'\n        },\n        text: f({\n          id: 'updatepass'\n        })\n      }), /*#__PURE__*/_jsxs(Card.Body, {\n        className: \"p-none\",\n        children: [/*#__PURE__*/_jsxs(\"form\", {\n          className: \"login-form\",\n          onSubmit: handleSubmit(submit),\n          children: [/*#__PURE__*/_jsx(FromGroup, {\n            label: f({\n              id: 'password'\n            }),\n            bodyClass: \"bg-bg\",\n            className: \"w-50 w-100\",\n            error: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message,\n            children: /*#__PURE__*/_jsx(Input, {\n              name: \"password\",\n              type: \"password\",\n              Ref: register({\n                required: {\n                  value: true,\n                  message: f({\n                    id: 'pass-requir'\n                  })\n                },\n                pattern: {\n                  value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n                  message: f({\n                    id: 'password-pattern'\n                  })\n                }\n              })\n            })\n          }), /*#__PURE__*/_jsx(FromGroup, {\n            label: f({\n              id: 'repeat-pass'\n            }),\n            bodyClass: \"bg-bg\",\n            className: \"w-50 w-100 mb-xs\",\n            error: (_errors$password_conf = errors.password_confirmation) === null || _errors$password_conf === void 0 ? void 0 : _errors$password_conf.message,\n            children: /*#__PURE__*/_jsx(Input, {\n              name: \"password_confirmation\",\n              type: \"password\",\n              Ref: register({\n                required: {\n                  value: true,\n                  message: f({\n                    id: 'repeatpas-requir'\n                  })\n                },\n                validate: function validate(value) {\n                  return value === password.current || f({\n                    id: 'repeatpas-valid'\n                  });\n                }\n              })\n            })\n          }), /*#__PURE__*/_jsx(ButtonComponent, {\n            type: \"submit\",\n            className: \"w-100 mt-xs mb-sm\",\n            label: f({\n              id: 'send'\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"mt-xs\",\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsx(\"span\", {}), /*#__PURE__*/_jsx(Link, {\n            href: \"/register\",\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(\"span\", {\n                className: \"color-yellow\",\n                style: {\n                  cursor: 'pointer'\n                },\n                children: f({\n                  id: 'signup'\n                })\n              })\n            })\n          })]\n        })]\n      })]\n    })\n  });\n}\n\nvar mapDispatchToProp = {\n  Login: Login\n};\n\nvar mapStateToProp = function mapStateToProp(state) {\n  return {\n    Entry: state.entry\n  };\n};\n\nexport default connect(mapStateToProp, mapDispatchToProp)( /*#__PURE__*/memo(ForgetPassword));","map":null,"metadata":{},"sourceType":"module"}