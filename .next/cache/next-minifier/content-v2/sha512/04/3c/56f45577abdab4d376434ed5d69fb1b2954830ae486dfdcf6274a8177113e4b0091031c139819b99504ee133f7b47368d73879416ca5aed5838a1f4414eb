{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[7],{\"20a2\":function(e,r,t){e.exports=t(\"nOHt\")},H77e:function(e,r,t){\"use strict\";var n=t(\"nKUr\");t(\"q1tI\");r.a=function(e){var r=e.children,t=e.style,s=e.className;return Object(n.jsx)(\"div\",{className:\"page \".concat(s||\"\"),style:t,children:Object(n.jsx)(\"div\",{className:\"container-fluid \",children:r})})}},HlVv:function(e,r,t){\"use strict\";var n=t(\"cpVT\"),s=t(\"nKUr\"),c=t(\"dhJC\");t(\"q1tI\");function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function u(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){Object(n.a)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}r.a=function(e){var r=e.label,t=e.startElement,n=e.endElement,i=e.className,a=e.style,o=e.Ref,l=Object(c.a)(e,[\"label\",\"startElement\",\"endElement\",\"className\",\"style\",\"Ref\"]);return Object(s.jsxs)(\"button\",u(u({className:\"btn \".concat(i||\"\"),style:a,ref:o},l),{},{children:[t,r,n]}))}},NKCw:function(e,r,t){\"use strict\";t.d(r,\"a\",(function(){return ve}));var n=t(\"q1tI\"),s=e=>e instanceof HTMLElement;const c=\"blur\",i=\"change\",u=\"input\",a=\"onBlur\",o=\"onChange\",l=\"onSubmit\",f=\"onTouched\",d=\"all\",b=\"undefined\",O=\"max\",y=\"min\",g=\"maxLength\",j=\"minLength\",m=\"pattern\",v=\"required\",h=\"validate\";var p=e=>null==e;const A=e=>\"object\"===typeof e;var V=e=>!p(e)&&!Array.isArray(e)&&A(e)&&!(e instanceof Date),w=e=>/^\\w*$/.test(e),R=e=>e.filter(Boolean),k=e=>R(e.replace(/[\"|']/g,\"\").replace(/\\[/g,\".\").replace(/\\]/g,\"\").split(\".\"));function C(e,r,t){let n=-1;const s=w(r)?[r]:k(r),c=s.length,i=c-1;for(;++n<c;){const r=s[n];let c=t;if(n!==i){const t=e[r];c=V(t)||Array.isArray(t)?t:isNaN(+s[n+1])?{}:[]}e[r]=c,e=e[r]}return e}var S=(e,r={})=>{for(const t in e)w(t)?r[t]=e[t]:C(r,t,e[t]);return r},D=e=>void 0===e,E=(e={},r,t)=>{const n=R(r.split(/[,[\\].]+?/)).reduce(((e,r)=>p(e)?e:e[r]),e);return D(n)||n===e?D(e[r])?t:e[r]:n},F=(e,r)=>{s(e)&&e.removeEventListener&&(e.removeEventListener(u,r),e.removeEventListener(i,r),e.removeEventListener(c,r))};const N={isValid:!1,value:null};var x=e=>Array.isArray(e)?e.reduce(((e,r)=>r&&r.ref.checked?{isValid:!0,value:r.ref.value}:e),N):N,P=e=>\"radio\"===e.type,L=e=>\"file\"===e.type,T=e=>\"checkbox\"===e.type,B=e=>\"select-multiple\"===e.type;const M={value:!1,isValid:!1},W={value:!0,isValid:!0};var H=e=>{if(Array.isArray(e)){if(e.length>1){const r=e.filter((e=>e&&e.ref.checked)).map((({ref:{value:e}})=>e));return{value:r,isValid:!!r.length}}const{checked:r,value:t,attributes:n}=e[0].ref;return r?n&&!D(n.value)?D(t)||\"\"===t?W:{value:t,isValid:!0}:W:M}return M};function q(e,r,t,n,s){const c=e.current[r];if(c){const{ref:{value:e,disabled:r},ref:t,valueAsNumber:u,valueAsDate:a,setValueAs:o}=c;if(r&&n)return;return L(t)?t.files:P(t)?x(c.options).value:B(t)?(i=t.options,[...i].filter((({selected:e})=>e)).map((({value:e})=>e))):T(t)?H(c.options).value:s?e:u?\"\"===e?NaN:+e:a?t.valueAsDate:o?o(e):e}var i;if(t)return E(t.current,r)}function I(e){return!e||e instanceof HTMLElement&&e.nodeType!==Node.DOCUMENT_NODE&&I(e.parentNode)}var U=e=>V(e)&&!Object.keys(e).length,$=e=>\"boolean\"===typeof e;function _(e,r){const t=w(r)?[r]:k(r),n=1==t.length?e:function(e,r){const t=r.slice(0,-1).length;let n=0;for(;n<t;)e=D(e)?n++:e[r[n++]];return e}(e,t),s=t[t.length-1];let c;n&&delete n[s];for(let i=0;i<t.slice(0,-1).length;i++){let r,n=-1;const s=t.slice(0,-(i+1)),u=s.length-1;for(i>0&&(c=e);++n<s.length;){const t=s[n];r=r?r[t]:e[t],u===n&&(V(r)&&U(r)||Array.isArray(r)&&!r.filter((e=>V(e)&&!U(e)||$(e))).length)&&(c?delete c[t]:delete e[t]),c=r}}return e}const J=(e,r)=>e&&e.ref===r;var K=e=>p(e)||!A(e);function z(e,r){if(K(e)||K(r))return r;for(const n in r){const s=e[n],c=r[n];try{e[n]=V(s)&&V(c)||Array.isArray(s)&&Array.isArray(c)?z(s,c):c}catch(t){}}return e}function G(e,r,t){if(K(e)||K(r)||e instanceof Date||r instanceof Date)return e===r;if(!Object(n.isValidElement)(e)){const n=Object.keys(e),s=Object.keys(r);if(n.length!==s.length)return!1;for(const c of n){const n=e[c];if(!t||\"ref\"!==c){const e=r[c];if((V(n)||Array.isArray(n))&&(V(e)||Array.isArray(e))?!G(n,e,t):n!==e)return!1}}}return!0}function Q(e,r,t,n,s){let c=-1;for(;++c<e.length;){for(const n in e[c])Array.isArray(e[c][n])?(!t[c]&&(t[c]={}),t[c][n]=[],Q(e[c][n],E(r[c]||{},n,[]),t[c][n],t[c],n)):G(E(r[c]||{},n),e[c][n])?C(t[c]||{},n):t[c]=Object.assign(Object.assign({},t[c]),{[n]:!0});n&&!t.length&&delete n[s]}return t}var X=(e,r,t)=>z(Q(e,r,t.slice(0,e.length)),Q(r,e,t.slice(0,e.length))),Y=e=>\"string\"===typeof e,Z=(e,r,t,n,s)=>{const c={};for(const i in e.current)(D(s)||(Y(s)?i.startsWith(s):Array.isArray(s)&&s.find((e=>i.startsWith(e)))))&&(c[i]=q(e,i,void 0,n));return t?S(c):z(r,S(c))},ee=e=>e instanceof RegExp,re=e=>V(e)&&!ee(e)?e:{value:e,message:\"\"},te=e=>\"function\"===typeof e,ne=e=>Y(e)||Object(n.isValidElement)(e);function se(e,r,t=\"validate\"){if(ne(e)||$(e)&&!e)return{type:t,message:ne(e)?e:\"\",ref:r}}var ce=(e,r,t,n,s)=>r?Object.assign(Object.assign({},t[e]),{types:Object.assign(Object.assign({},t[e]&&t[e].types?t[e].types:{}),{[n]:s||!0})}):{},ie=async(e,r,{ref:t,ref:{value:n},options:s,required:c,maxLength:i,minLength:u,min:a,max:o,pattern:l,validate:f},d)=>{const b=t.name,A={},w=P(t),R=T(t),k=w||R,C=\"\"===n,S=ce.bind(null,b,r,A),D=(e,r,n,s=g,c=j)=>{const i=e?r:n;A[b]=Object.assign({type:e?s:c,message:i,ref:t},S(e?s:c,i))};if(c&&(!w&&!R&&(C||p(n))||$(n)&&!n||R&&!H(s).isValid||w&&!x(s).isValid)){const{value:n,message:s}=ne(c)?{value:!!c,message:c}:re(c);if(n&&(A[b]=Object.assign({type:v,message:s,ref:k?((e.current[b].options||[])[0]||{}).ref:t},S(v,s)),!r))return A}if((!p(a)||!p(o))&&\"\"!==n){let e,s;const c=re(o),i=re(a);if(isNaN(n)){const r=t.valueAsDate||new Date(n);Y(c.value)&&(e=r>new Date(c.value)),Y(i.value)&&(s=r<new Date(i.value))}else{const r=t.valueAsNumber||parseFloat(n);p(c.value)||(e=r>c.value),p(i.value)||(s=r<i.value)}if((e||s)&&(D(!!e,c.message,i.message,O,y),!r))return A}if(Y(n)&&!C&&(i||u)){const e=re(i),t=re(u),s=!p(e.value)&&n.length>e.value,c=!p(t.value)&&n.length<t.value;if((s||c)&&(D(s,e.message,t.message),!r))return A}if(Y(n)&&l&&!C){const{value:e,message:s}=re(l);if(ee(e)&&!e.test(n)&&(A[b]=Object.assign({type:m,message:s,ref:t},S(m,s)),!r))return A}if(f){const n=q(e,b,d,!1,!0),c=k&&s?s[0].ref:t;if(te(f)){const e=se(await f(n),c);if(e&&(A[b]=Object.assign(Object.assign({},e),S(h,e.message)),!r))return A}else if(V(f)){let e={};for(const[t,s]of Object.entries(f)){if(!U(e)&&!r)break;const i=se(await s(n),c,t);i&&(e=Object.assign(Object.assign({},i),S(t,i.message)),r&&(A[b]=e))}if(!U(e)&&(A[b]=Object.assign({ref:c},e),!r))return A}}return A};const ue=(e,r,t=[])=>{for(const n in r){const s=e+(V(r)?`.${n}`:`[${n}]`);K(r[n])?t.push(s):ue(s,r[n],t)}return t};var ae=(e,r,t,n,s)=>{let c;return t.add(r),U(e)||(c=E(e,r),(V(c)||Array.isArray(c))&&ue(r,c).forEach((e=>t.add(e)))),D(c)?s?n:E(n,r):c},oe=({isOnBlur:e,isOnChange:r,isOnTouch:t,isTouched:n,isReValidateOnBlur:s,isReValidateOnChange:c,isBlurEvent:i,isSubmitted:u,isOnAll:a})=>!a&&(!u&&t?!(n||i):(u?s:e)?!i:!(u?c:r)||i),le=e=>e.substring(0,e.indexOf(\"[\"));const fe=(e,r)=>RegExp(`^${r}([|.)\\\\d+`.replace(/\\[/g,\"\\\\[\").replace(/\\]/g,\"\\\\]\")).test(e);var de=(e,r)=>[...e].some((e=>fe(r,e)));var be=typeof window!==b&&typeof document!==b;function Oe(e){var r;let t;if(K(e)||be&&(e instanceof File||s(e)))return e;if(![\"Set\",\"Map\",\"Object\",\"Date\",\"Array\"].includes(null===(r=e.constructor)||void 0===r?void 0:r.name))return e;if(e instanceof Date)return t=new Date(e.getTime()),t;if(e instanceof Set){t=new Set;for(const r of e)t.add(r);return t}if(e instanceof Map){t=new Map;for(const r of e.keys())t.set(r,Oe(e.get(r)));return t}t=Array.isArray(e)?[]:{};for(const n in e)t[n]=Oe(e[n]);return t}var ye=e=>({isOnSubmit:!e||e===l,isOnBlur:e===a,isOnChange:e===o,isOnAll:e===d,isOnTouch:e===f}),ge=e=>P(e)||T(e);const je=typeof window===b,me=be?\"Proxy\"in window:typeof Proxy!==b;function ve({mode:e=l,reValidateMode:r=o,resolver:t,context:a,defaultValues:f={},shouldFocusError:b=!0,shouldUnregister:O=!0,criteriaMode:y}={}){const g=Object(n.useRef)({}),j=Object(n.useRef)({}),m=Object(n.useRef)({}),v=Object(n.useRef)(new Set),h=Object(n.useRef)({}),A=Object(n.useRef)({}),k=Object(n.useRef)({}),N=Object(n.useRef)({}),x=Object(n.useRef)(f),M=Object(n.useRef)(!1),W=Object(n.useRef)(!1),H=Object(n.useRef)(),$=Object(n.useRef)({}),z=Object(n.useRef)({}),Q=Object(n.useRef)(a),ee=Object(n.useRef)(t),re=Object(n.useRef)(new Set),ne=Object(n.useRef)(ye(e)),{isOnSubmit:se,isOnTouch:ce}=ne.current,fe=y===d,[ve,he]=Object(n.useState)({isDirty:!1,isValidating:!1,dirtyFields:{},isSubmitted:!1,submitCount:0,touched:{},isSubmitting:!1,isSubmitSuccessful:!1,isValid:!se,errors:{}}),pe=Object(n.useRef)({isDirty:!me,dirtyFields:!me,touched:!me||ce,isValidating:!me,isSubmitting:!me,isValid:!me}),Ae=Object(n.useRef)(ve),Ve=Object(n.useRef)(),{isOnBlur:we,isOnChange:Re}=Object(n.useRef)(ye(r)).current;Q.current=a,ee.current=t,Ae.current=ve,$.current=O?{}:U($.current)?Oe(f):$.current;const ke=Object(n.useCallback)(((e={})=>{M.current||(Ae.current=Object.assign(Object.assign({},Ae.current),e),he(Ae.current))}),[]),Ce=()=>pe.current.isValidating&&ke({isValidating:!0}),Se=Object(n.useCallback)(((e,r,t=!1,n={},s)=>{let c=t||(({errors:e,name:r,error:t,validFields:n,fieldsWithValidation:s})=>{const c=D(t),i=E(e,r);return c&&!!i||!c&&!G(i,t,!0)||c&&E(s,r)&&!E(n,r)})({errors:Ae.current.errors,error:r,name:e,validFields:N.current,fieldsWithValidation:k.current});const i=E(Ae.current.errors,e);r?(_(N.current,e),c=c||!i||!G(i,r,!0),C(Ae.current.errors,e,r)):((E(k.current,e)||ee.current)&&(C(N.current,e,!0),c=c||i),_(Ae.current.errors,e)),(c&&!p(t)||!U(n)||pe.current.isValidating)&&ke(Object.assign(Object.assign(Object.assign({},n),ee.current?{isValid:!!s}:{}),{isValidating:!1}))}),[]),De=Object(n.useCallback)(((e,r)=>{const{ref:t,options:n}=g.current[e],c=be&&s(t)&&p(r)?\"\":r;P(t)?(n||[]).forEach((({ref:e})=>e.checked=e.value===c)):L(t)&&!Y(c)?t.files=c:B(t)?[...t.options].forEach((e=>e.selected=c.includes(e.value))):T(t)&&n?n.length>1?n.forEach((({ref:e})=>e.checked=Array.isArray(c)?!!c.find((r=>r===e.value)):c===e.value)):n[0].ref.checked=!!c:t.value=c}),[]),Ee=Object(n.useCallback)(((e,r)=>{if(pe.current.isDirty){const t=He();return e&&r&&C(t,e,r),!G(t,x.current)}return!1}),[]),Fe=Object(n.useCallback)(((e,r=!0)=>{if(pe.current.isDirty||pe.current.dirtyFields){const t=!G(E(x.current,e),q(g,e,$)),n=E(Ae.current.dirtyFields,e),s=Ae.current.isDirty;t?C(Ae.current.dirtyFields,e,!0):_(Ae.current.dirtyFields,e);const c={isDirty:Ee(),dirtyFields:Ae.current.dirtyFields},i=pe.current.isDirty&&s!==c.isDirty||pe.current.dirtyFields&&n!==E(Ae.current.dirtyFields,e);return i&&r&&ke(c),i?c:{}}return{}}),[]),Ne=Object(n.useCallback)((async(e,r)=>{const t=(await ie(g,fe,g.current[e],$))[e];return Se(e,t,r),D(t)}),[Se,fe]),xe=Object(n.useCallback)((async e=>{const{errors:r}=await ee.current(He(),Q.current,fe),t=Ae.current.isValid;if(Array.isArray(e)){const t=e.map((e=>{const t=E(r,e);return t?C(Ae.current.errors,e,t):_(Ae.current.errors,e),!t})).every(Boolean);return ke({isValid:U(r),isValidating:!1}),t}{const n=E(r,e);return Se(e,n,t!==U(r),{},U(r)),!n}}),[Se,fe]),Pe=Object(n.useCallback)((async e=>{const r=e||Object.keys(g.current);if(Ce(),ee.current)return xe(r);if(Array.isArray(r)){!e&&(Ae.current.errors={});const t=await Promise.all(r.map((async e=>await Ne(e,null))));return ke({isValidating:!1}),t.every(Boolean)}return await Ne(r)}),[xe,Ne]),Le=Object(n.useCallback)(((e,r,{shouldDirty:t,shouldValidate:n})=>{const s={};C(s,e,r);for(const c of ue(e,r))g.current[c]&&(De(c,E(s,c)),t&&Fe(c),n&&Pe(c))}),[Pe,De,Fe]),Te=Object(n.useCallback)(((e,r,t)=>{if(!O&&!K(r)&&C($.current,e,Array.isArray(r)?[...r]:Object.assign({},r)),g.current[e])De(e,r),t.shouldDirty&&Fe(e),t.shouldValidate&&Pe(e);else if(!K(r)&&(Le(e,r,t),re.current.has(e))){const n=le(e)||e;C(j.current,e,r),z.current[n]({[n]:E(j.current,n)}),(pe.current.isDirty||pe.current.dirtyFields)&&t.shouldDirty&&(C(Ae.current.dirtyFields,e,X(r,E(x.current,e,[]),E(Ae.current.dirtyFields,e,[]))),ke({isDirty:!G(Object.assign(Object.assign({},He()),{[e]:r}),x.current)}))}!O&&C($.current,e,r)}),[Fe,De,Le]),Be=e=>W.current||v.current.has(e)||v.current.has((e.match(/\\w+/)||[])[0]),Me=e=>{let r=!0;if(!U(h.current))for(const t in h.current)e&&h.current[t].size&&!h.current[t].has(e)&&!h.current[t].has(le(e))||(A.current[t](),r=!1);return r};function We(e){if(!O){let r=Oe(e);for(const e of re.current)w(e)&&!r[e]&&(r=Object.assign(Object.assign({},r),{[e]:[]}));return r}return e}function He(e){if(Y(e))return q(g,e,$);if(Array.isArray(e)){const r={};for(const t of e)C(r,t,q(g,t,$));return r}return We(Z(g,Oe($.current),O))}H.current=H.current?H.current:async({type:e,target:r})=>{let t=r.name;const n=g.current[t];let s,i;if(n){const u=e===c,a=oe(Object.assign({isBlurEvent:u,isReValidateOnChange:Re,isReValidateOnBlur:we,isTouched:!!E(Ae.current.touched,t),isSubmitted:Ae.current.isSubmitted},ne.current));let o=Fe(t,!1),l=!U(o)||!u&&Be(t);if(u&&!E(Ae.current.touched,t)&&pe.current.touched&&(C(Ae.current.touched,t,!0),o=Object.assign(Object.assign({},o),{touched:Ae.current.touched})),!O&&T(r)&&C($.current,t,q(g,t)),a)return!u&&Me(t),(!U(o)||l&&U(o))&&ke(o);if(Ce(),ee.current){const{errors:e}=await ee.current(He(),Q.current,fe),n=Ae.current.isValid;if(s=E(e,t),T(r)&&!s&&ee.current){const r=le(t),n=E(e,r,{});n.type&&n.message&&(s=n),r&&(n||E(Ae.current.errors,r))&&(t=r)}i=U(e),n!==i&&(l=!0)}else s=(await ie(g,fe,n,$))[t];!u&&Me(t),Se(t,s,l,o,i)}};const qe=Object(n.useCallback)((async(e={})=>{const r=U(g.current)?x.current:{},{errors:t}=await ee.current(Object.assign(Object.assign(Object.assign({},r),He()),e),Q.current,fe)||{},n=U(t);Ae.current.isValid!==n&&ke({isValid:n})}),[fe]),Ie=Object(n.useCallback)(((e,r)=>{!function(e,r,t,n,s,c){const{ref:i,ref:{name:u}}=t,a=e.current[u];if(!s){const r=q(e,u,n);!D(r)&&C(n.current,u,r)}i.type&&a?P(i)||T(i)?Array.isArray(a.options)&&a.options.length?(R(a.options).forEach(((e={},t)=>{(I(e.ref)&&J(e,e.ref)||c)&&(F(e.ref,r),_(a.options,`[${t}]`))})),a.options&&!R(a.options).length&&delete e.current[u]):delete e.current[u]:(I(i)&&J(a,i)||c)&&(F(i,r),delete e.current[u]):delete e.current[u]}(g,H.current,e,$,O,r),O&&(_(N.current,e.ref.name),_(k.current,e.ref.name))}),[O]),Ue=Object(n.useCallback)((e=>{if(W.current)ke();else{for(const r of v.current)if(r.startsWith(e)){ke();break}Me(e)}}),[]),$e=Object(n.useCallback)(((e,r)=>{e&&(Ie(e,r),O&&!R(e.options||[]).length&&(_(Ae.current.errors,e.ref.name),C(Ae.current.dirtyFields,e.ref.name,!0),ke({isDirty:Ee()}),pe.current.isValid&&ee.current&&qe(),Ue(e.ref.name)))}),[qe,Ie]);const _e=Object(n.useCallback)(((e,r,t)=>{const n=t?h.current[t]:v.current;let s=Z(g,Oe($.current),O,!1,e);if(Y(e)){const t=le(e)||e;return re.current.has(t)&&(s=Object.assign(Object.assign({},m.current),s)),ae(s,e,n,D(E(x.current,e))?r:E(x.current,e),!0)}const c=D(r)?x.current:r;return Array.isArray(e)?e.reduce(((e,r)=>Object.assign(Object.assign({},e),{[r]:ae(s,r,n,c)})),{}):(W.current=D(t),S(!U(s)&&s||c))}),[]);function Je(e,r={}){const{name:t,type:n,value:a}=e,o=Object.assign({ref:e},r),l=g.current,f=ge(e),d=de(re.current,t),b=r=>be&&(!s(e)||r===e);let y,j=l[t],m=!0;if(j&&(f?Array.isArray(j.options)&&R(j.options).find((e=>a===e.ref.value&&b(e.ref))):b(j.ref)))return void(l[t]=Object.assign(Object.assign({},j),r));j=n?f?Object.assign({options:[...R(j&&j.options||[]),{ref:e}],ref:{type:n,name:t}},r):Object.assign({},o):o,l[t]=j;const v=D(E($.current,t));U(x.current)&&v||(y=E(v?x.current:$.current,t),m=D(y),m||d||De(t,y)),U(r)||(C(k.current,t,!0),!se&&pe.current.isValid&&ie(g,fe,j,$).then((e=>{const r=Ae.current.isValid;U(e)?C(N.current,t,!0):_(N.current,t),r!==U(e)&&ke()}))),!O||d&&m||!d&&_(Ae.current.dirtyFields,t),n&&function({ref:e},r,t){s(e)&&t&&(e.addEventListener(r?i:u,t),e.addEventListener(c,t))}(f&&j.options?j.options[j.options.length-1]:j,f||\"select-one\"===e.type,H.current)}const Ke=Object(n.useCallback)(((e,r)=>async t=>{t&&t.preventDefault&&(t.preventDefault(),t.persist());let n={},s=We(Z(g,Oe($.current),O,!0));pe.current.isSubmitting&&ke({isSubmitting:!0});try{if(ee.current){const{errors:e,values:r}=await ee.current(s,Q.current,fe);Ae.current.errors=n=e,s=r}else for(const e of Object.values(g.current))if(e){const{name:r}=e.ref,t=await ie(g,fe,e,$);t[r]?(C(n,r,t[r]),_(N.current,r)):E(k.current,r)&&(_(Ae.current.errors,r),C(N.current,r,!0))}U(n)&&Object.keys(Ae.current.errors).every((e=>e in g.current))?(ke({errors:{},isSubmitting:!0}),await e(s,t)):(Ae.current.errors=Object.assign(Object.assign({},Ae.current.errors),n),r&&await r(Ae.current.errors,t),b&&((e,r)=>{for(const t in e)if(E(r,t)){const r=e[t];if(r){if(r.ref.focus&&D(r.ref.focus()))break;if(r.options){r.options[0].ref.focus();break}}}})(g.current,Ae.current.errors))}finally{Ae.current.isSubmitting=!1,ke({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:U(Ae.current.errors),submitCount:Ae.current.submitCount+1})}}),[b,fe]);Object(n.useEffect)((()=>{t&&pe.current.isValid&&qe(),Ve.current=Ve.current||!be?Ve.current:function(e,r){const t=new MutationObserver((()=>{for(const t of Object.values(e.current))if(t&&t.options)for(const e of t.options)e&&e.ref&&I(e.ref)&&r(t);else t&&I(t.ref)&&r(t)}));return t.observe(window.document,{childList:!0,subtree:!0}),t}(g,$e)}),[$e,x.current]),Object(n.useEffect)((()=>()=>{Ve.current&&Ve.current.disconnect(),M.current=!0,Object.values(g.current).forEach((e=>$e(e,!0)))}),[]),!t&&pe.current.isValid&&(ve.isValid=G(N.current,k.current)&&U(Ae.current.errors));const ze={trigger:Pe,setValue:Object(n.useCallback)((function(e,r,t){Te(e,r,t||{}),Be(e)&&ke(),Me(e)}),[Te,Pe]),getValues:Object(n.useCallback)(He,[]),register:Object(n.useCallback)((function(e,r){if(!je)if(Y(e))Je({name:e},r);else{if(!V(e)||!(\"name\"in e))return r=>r&&Je(r,e);Je(e,r)}}),[x.current]),unregister:Object(n.useCallback)((function(e){for(const r of Array.isArray(e)?e:[e])$e(g.current[r],!0)}),[]),formState:me?new Proxy(ve,{get:(e,r)=>{if(r in e)return pe.current[r]=!0,e[r]}}):ve},Ge=Object(n.useMemo)((()=>Object.assign({isFormDirty:Ee,updateWatchedValue:Ue,shouldUnregister:O,updateFormState:ke,removeFieldEventListener:Ie,watchInternal:_e,mode:ne.current,reValidateMode:{isReValidateOnBlur:we,isReValidateOnChange:Re},validateResolver:t?qe:void 0,fieldsRef:g,resetFieldArrayFunctionRef:z,useWatchFieldsRef:h,useWatchRenderFunctionsRef:A,fieldArrayDefaultValuesRef:j,validFieldsRef:N,fieldsWithValidationRef:k,fieldArrayNamesRef:re,readFormStateRef:pe,formStateRef:Ae,defaultValuesRef:x,shallowFieldsStateRef:$,fieldArrayValuesRef:m},ze)),[x.current,Ue,O,Ie,_e]);return Object.assign({watch:function(e,r){return _e(e,r)},control:Ge,handleSubmit:Ke,reset:Object(n.useCallback)(((e,r={})=>{if(be)for(const n of Object.values(g.current))if(n){const{ref:e,options:r}=n,c=ge(e)&&Array.isArray(r)?r[0].ref:e;if(s(c))try{c.closest(\"form\").reset();break}catch(t){}}g.current={},x.current=Object.assign({},e||x.current),e&&Me(\"\"),Object.values(z.current).forEach((e=>te(e)&&e())),$.current=O?{}:Oe(e||x.current),(({errors:e,isDirty:r,isSubmitted:t,touched:n,isValid:s,submitCount:c,dirtyFields:i})=>{s||(N.current={},k.current={}),j.current={},v.current=new Set,W.current=!1,ke({submitCount:c?Ae.current.submitCount:0,isDirty:!!r&&Ae.current.isDirty,isSubmitted:!!t&&Ae.current.isSubmitted,isValid:!!s&&Ae.current.isValid,dirtyFields:i?Ae.current.dirtyFields:{},touched:n?Ae.current.touched:{},errors:e?Ae.current.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})})(r)}),[]),clearErrors:Object(n.useCallback)((function(e){e&&(Array.isArray(e)?e:[e]).forEach((e=>g.current[e]&&w(e)?delete Ae.current.errors[e]:_(Ae.current.errors,e))),ke({errors:e?Ae.current.errors:{}})}),[]),setError:Object(n.useCallback)((function(e,r){const t=(g.current[e]||{}).ref;C(Ae.current.errors,e,Object.assign(Object.assign({},r),{ref:t})),ke({isValid:!1}),r.shouldFocus&&t&&t.focus&&t.focus()}),[]),errors:ve.errors},ze)}const he=Object(n.createContext)(null);he.displayName=\"RHFContext\"},cpVT:function(e,r,t){\"use strict\";function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}t.d(r,\"a\",(function(){return n}))},dhJC:function(e,r,t){\"use strict\";function n(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}t.d(r,\"a\",(function(){return n}))}}]);","map":{"version":3,"sources":["static/chunks/eeb56491cd0978b219aba43699bd70bf30c755c7.a1ab0281d56e8606129c.js"],"names":["window","push","20a2","module","exports","__webpack_require__","H77e","__webpack_exports__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","_ref","children","style","className","Object","concat","HlVv","_Users_naibtahmazli_Documents_166kargo_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","_Users_naibtahmazli_Documents_166kargo_node_modules_next_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","label","startElement","endElement","Ref","rest","ref","NKCw","d","useForm","react__WEBPACK_IMPORTED_MODULE_0__","isHTMLElement","value","HTMLElement","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","Boolean","stringToPath","input","replace","split","set","path","index","tempPath","lastIndex","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","get","obj","defaultValue","result","reduce","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","options","previous","option","checked","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","selected","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","assign","[object Object]","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","errors","types","validateField","async","required","maxLength","minLength","min","max","pattern","validate","error","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isWeb","document","cloneObject","copy","File","includes","constructor","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","fields","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","shouldSkipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focus","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","watch","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","displayName","cpVT","_defineProperty","configurable","writable","dhJC","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"mappings":"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"},"name":"static/chunks/eeb56491cd0978b219aba43699bd70bf30c755c7.a1ab0281d56e8606129c.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[7],{\n\n/***/ \"20a2\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"nOHt\")\n\n\n/***/ }),\n\n/***/ \"H77e\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"nKUr\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"q1tI\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction Page(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      className = _ref.className;\n  return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsx\"])(\"div\", {\n    className: \"page \".concat(className || ''),\n    style: style,\n    children: /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsx\"])(\"div\", {\n      className: \"container-fluid \",\n      children: children\n    })\n  });\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Page);\n\n/***/ }),\n\n/***/ \"HlVv\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _Users_naibtahmazli_Documents_166kargo_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"cpVT\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"nKUr\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Users_naibtahmazli_Documents_166kargo_node_modules_next_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"dhJC\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"q1tI\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_Users_naibtahmazli_Documents_166kargo_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\nvar ButtonComponent = function ButtonComponent(_ref) {\n  var label = _ref.label,\n      startElement = _ref.startElement,\n      endElement = _ref.endElement,\n      className = _ref.className,\n      style = _ref.style,\n      Ref = _ref.Ref,\n      rest = Object(_Users_naibtahmazli_Documents_166kargo_node_modules_next_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(_ref, [\"label\", \"startElement\", \"endElement\", \"className\", \"style\", \"Ref\"]);\n\n  return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(\"button\", _objectSpread(_objectSpread({\n    className: \"btn \".concat(className || ''),\n    style: style,\n    ref: Ref\n  }, rest), {}, {\n    children: [startElement, label, endElement]\n  }));\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ButtonComponent);\n\n/***/ }),\n\n/***/ \"NKCw\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export Controller */\n/* unused harmony export FormProvider */\n/* unused harmony export appendErrors */\n/* unused harmony export get */\n/* unused harmony export transformToNestObject */\n/* unused harmony export useController */\n/* unused harmony export useFieldArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return useForm; });\n/* unused harmony export useFormContext */\n/* unused harmony export useWatch */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"q1tI\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled, shouldKeepRawValue) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, valueAsNumber, valueAsDate, setValueAs, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return shouldKeepRawValue\r\n            ? value\r\n            : valueAsNumber\r\n                ? value === ''\r\n                    ? NaN\r\n                    : +value\r\n                : valueAsDate\r\n                    ? ref.valueAsDate\r\n                    : setValueAs\r\n                        ? setValueAs(value)\r\n                        : value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!ref.type || !fieldRef) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if (isRadioInput(ref) || isCheckBoxInput(ref)) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option = {}, index) => {\r\n                if ((isDetached(option.ref) && isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    if (!Object(react__WEBPACK_IMPORTED_MODULE_0__[\"isValidElement\"])(object1)) {\r\n        const keys1 = Object.keys(object1);\r\n        const keys2 = Object.keys(object2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n        for (const key of keys1) {\r\n            const val1 = object1[key];\r\n            if (!(isErrorObject && key === 'ref')) {\r\n                const val2 = object2[key];\r\n                if ((isObject(val1) || Array.isArray(val1)) &&\r\n                    (isObject(val2) || Array.isArray(val2))\r\n                    ? !deepEqual(val1, val2, isErrorObject)\r\n                    : val1 !== val2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                deepEqual(get(defaultValues[index] || {}, key), values[index][key])\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        parentNode &&\r\n            !dirtyFields.length &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields;\r\n}\r\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nvar isErrorStateChanged = ({ errors, name, error, validFields, fieldsWithValidation, }) => {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || Object(react__WEBPACK_IMPORTED_MODULE_0__[\"isValidElement\"])(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(value)) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef, false, true);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (rootPath, values, paths = []) => {\r\n    for (const property in values) {\r\n        const rootName = (rootPath +\r\n            (isObject(values)\r\n                ? `.${property}`\r\n                : `[${property}]`));\r\n        isPrimitive(values[property])\r\n            ? paths.push(rootName)\r\n            : getPath(rootName, values[property], paths);\r\n    }\r\n    return paths;\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value = undefined;\r\n    watchFields.add(fieldName);\r\n    if (!isEmptyObject(fieldValues)) {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\r\n    var _a;\r\n    let copy;\r\n    if (isPrimitive(data) ||\r\n        (isWeb && (data instanceof File || isHTMLElement(data)))) {\r\n        return data;\r\n    }\r\n    if (!['Set', 'Map', 'Object', 'Date', 'Array'].includes((_a = data.constructor) === null || _a === void 0 ? void 0 : _a.name)) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key)));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key]);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const fieldArrayDefaultValuesRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const fieldArrayValuesRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const watchFieldsRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(new Set());\r\n    const useWatchFieldsRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const useWatchRenderFunctionsRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const fieldsWithValidationRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const validFieldsRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const defaultValuesRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(defaultValues);\r\n    const isUnMount = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(false);\r\n    const isWatchAllRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(false);\r\n    const handleChangeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\r\n    const shallowFieldsStateRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const resetFieldArrayFunctionRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({});\r\n    const contextRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(context);\r\n    const resolverRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(resolver);\r\n    const fieldArrayNamesRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(new Set());\r\n    const modeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isValidating: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(formState);\r\n    const observerRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((state = {}) => {\r\n        if (!isUnMount.current) {\r\n            formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n            setFormState(formStateRef.current);\r\n        }\r\n    }, []);\r\n    const updateIsValidating = () => readFormStateRef.current.isValidating &&\r\n        updateFormState({\r\n            isValidating: true,\r\n        });\r\n    const shouldRenderBaseOnError = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state) ||\r\n            readFormStateRef.current.isValidating) {\r\n            updateFormState(Object.assign(Object.assign(Object.assign({}, state), (resolverRef.current ? { isValid: !!isValid } : {})), { isValidating: false }));\r\n        }\r\n    }, []);\r\n    const setFieldValue = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref)) {\r\n            (options || []).forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name, data) => {\r\n        if (readFormStateRef.current.isDirty) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            isChanged && shouldRender && updateFormState(state);\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(async (name, skipReRender) => {\r\n        if (false) {}\r\n        const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n        shouldRenderBaseOnError(name, error, skipReRender);\r\n        return isUndefined(error);\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n                isValidating: false,\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        updateIsValidating();\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState({\r\n                isValidating: false,\r\n            });\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name, value, config) => {\r\n        !shouldUnregister &&\r\n            !isPrimitive(value) &&\r\n            set(shallowFieldsStateRef.current, name, Array.isArray(value) ? [...value] : Object.assign({}, value));\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n            config.shouldValidate && trigger(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                const parentName = getFieldArrayParentName(name) || name;\r\n                set(fieldArrayDefaultValuesRef.current, name, value);\r\n                resetFieldArrayFunctionRef.current[parentName]({\r\n                    [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name) => {\r\n        let found = true;\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config || {});\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) ||\r\n                    (!isBlurEvent && isFieldWatched(name));\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (!shouldUnregister && isCheckBoxInput(target)) {\r\n                    set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    !isBlurEvent && renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                updateIsValidating();\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = getFieldArrayParentName(name);\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    previousFormIsValid !== isValid && (shouldRender = true);\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                !isBlurEvent && renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\r\n    }\r\n    const validateResolver = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(async (values = {}) => {\r\n        const newDefaultValues = isEmptyObject(fieldsRef.current)\r\n            ? defaultValuesRef.current\r\n            : {};\r\n        const { errors } = (await resolverRef.current(Object.assign(Object.assign(Object.assign({}, newDefaultValues), getValues()), values), contextRef.current, isValidateAllFieldCriteria)) || {};\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((field, forceDelete) => {\r\n        findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\r\n        if (shouldUnregister) {\r\n            unset(validFieldsRef.current, field.ref.name);\r\n            unset(fieldsWithValidationRef.current, field.ref.name);\r\n        }\r\n    }, [shouldUnregister]);\r\n    const updateWatchedValue = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    isDirty: isFormDirty(),\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            const parentNodeName = getFieldArrayParentName(fieldNames) || fieldNames;\r\n            if (fieldArrayNamesRef.current.has(parentNodeName)) {\r\n                fieldValues = Object.assign(Object.assign({}, fieldArrayValuesRef.current), fieldValues);\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames))\r\n                ? defaultValue\r\n                : get(defaultValuesRef.current, fieldNames), true);\r\n        }\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, options = {}) {\r\n        if (false) {}\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, options);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), options);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, options) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    previousFormIsValid !== isEmptyObject(error) && updateFormState();\r\n                });\r\n            }\r\n        }\r\n        if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrRegisterOptions, options) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrRegisterOptions)) {\r\n                registerFieldRef({ name: refOrRegisterOptions }, options);\r\n            }\r\n            else if (isObject(refOrRegisterOptions) &&\r\n                'name' in refOrRegisterOptions) {\r\n                registerFieldRef(refOrRegisterOptions, options);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { name } = field.ref;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = Object.assign({}, (values || defaultValuesRef.current));\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values || defaultValuesRef.current);\r\n        resetRefs(omitResetState);\r\n    };\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => () => {\r\n        observerRef.current && observerRef.current.disconnect();\r\n        isUnMount.current = true;\r\n        if (false) {}\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(setValue, [setInternalValue, trigger]),\r\n        getValues: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(getValues, []),\r\n        register: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(register, [defaultValuesRef.current]),\r\n        unregister: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(unregister, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (false) {}\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(reset, []), clearErrors: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(clearErrors, []), setError: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createContext\"])(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort((a, b) => a - b));\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data) => {\r\n    if (isObject(data)) {\r\n        const object = {};\r\n        for (const key in data) {\r\n            object[key] = true;\r\n        }\r\n        return object;\r\n    }\r\n    return true;\r\n});\n\nconst mapIds = (values = [], keyName, skipWarn) => {\r\n    if (false) {}\r\n    return values.map((value) => (Object.assign({ [keyName]: value[keyName] || generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (false) {}\r\n    const focusIndexRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(-1);\r\n    const isUnMount = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(false);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const getDefaultValues = (values) => get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? getDefaultValues(fieldArrayDefaultValuesRef.current)\r\n            : getDefaultValues(defaultValuesRef.current)),\r\n    ]);\r\n    const [fields, setFields] = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const omitKey = (fields) => fields.map((_a = {}) => {\r\n        var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n        return rest;\r\n    });\r\n    fieldArrayNamesRef.current.add(name);\r\n    const getFieldArrayValue = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(() => get(fieldArrayValuesRef.current, name, []), [name]);\r\n    const getCurrentFieldsValues = () => mapIds(get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item))), keyName, true);\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n                delete fieldsRef.current[key];\r\n            }\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        if (updatedFieldArrayValues) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFormValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        if (!isUnMount.current && readFormStateRef.current.isDirty) {\r\n            updateFormState({\r\n                isDirty: isFormDirty(name, omitKey(updatedFormValues)),\r\n            });\r\n        }\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const appendValue = Array.isArray(value) ? value : [value];\r\n        const updateFormValues = [\r\n            ...getCurrentFieldsValues(),\r\n            ...mapIds(appendValue, keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                ...cloneObject(appendValue),\r\n            ]);\r\n        focusIndexRef.current = shouldFocus\r\n            ? get(fieldArrayValuesRef.current, name).length - 1\r\n            : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\r\n        if (false) {}\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                if (!isUnMount.current) {\r\n                    setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n                }\r\n            };\r\n        }\r\n        return () => {\r\n            isUnMount.current = true;\r\n            shouldUnregister && remove();\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef.current, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(swap, [name]),\r\n        move: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(move, [name]),\r\n        prepend: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(prepend$1, [name]),\r\n        append: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(append, [name]),\r\n        remove: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(remove, [name]),\r\n        insert: Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nfunction useController({ name, rules, defaultValue, control, onFocus, }) {\r\n    const methods = useFormContext();\r\n    if (false) {}\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formState, formStateRef: { current: { isSubmitted, touched, errors }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(getInitialValue());\r\n    const valueRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(value);\r\n    const ref = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            if (false) {}\r\n        }));\r\n    const shouldValidate = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((shouldUpdateValue) => {\r\n        if (false) {}\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperties({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, {\r\n                value: {\r\n                    set(data) {\r\n                        setInputStateValue(data);\r\n                        valueRef.current = data;\r\n                    },\r\n                    get() {\r\n                        return valueRef.current;\r\n                    },\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => () => unregister(name), [name]);\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\r\n        if (false) {}\r\n        registerField();\r\n    }, [registerField]);\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\r\n    const onChange = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    return {\r\n        field: {\r\n            onChange,\r\n            onBlur,\r\n            name,\r\n            value,\r\n            ref,\r\n        },\r\n        meta: Object.defineProperties({\r\n            invalid: !!get(errors, name),\r\n        }, {\r\n            isDirty: {\r\n                get() {\r\n                    return !!get(formState.dirtyFields, name);\r\n                },\r\n            },\r\n            isTouched: {\r\n                get() {\r\n                    return !!get(formState.touched, name);\r\n                },\r\n            },\r\n        }),\r\n    };\r\n}\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (false) {}\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])()[1];\r\n    const idRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\r\n    const defaultValueRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(defaultValue);\r\n    Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\r\n        if (false) {}\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nconst Controller = (props) => {\r\n    const { rules, as, render, defaultValue, control, onFocus } = props, rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const { field, meta } = useController(props);\r\n    const componentProps = Object.assign(Object.assign({}, rest), field);\r\n    return as\r\n        ? Object(react__WEBPACK_IMPORTED_MODULE_0__[\"isValidElement\"])(as)\r\n            ? Object(react__WEBPACK_IMPORTED_MODULE_0__[\"cloneElement\"])(as, componentProps)\r\n            : Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(as, componentProps)\r\n        : render\r\n            ? render(field, meta)\r\n            : null;\r\n};\n\n\n//# sourceMappingURL=index.esm.js.map\n\n\n/***/ }),\n\n/***/ \"cpVT\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _defineProperty; });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/***/ }),\n\n/***/ \"dhJC\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ _objectWithoutProperties; });\n\n// CONCATENATED MODULE: ./node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// CONCATENATED MODULE: ./node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/naibtahmazli/Documents/166kargo/node_modules/next/router.js","/Users/naibtahmazli/Documents/166kargo/node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--4!/Users/naibtahmazli/Documents/166kargo/components/page/page.js","/Users/naibtahmazli/Documents/166kargo/node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--4!/Users/naibtahmazli/Documents/166kargo/components/button/index.js","/Users/naibtahmazli/Documents/166kargo/node_modules/react-hook-form/dist/index.esm.js","/Users/naibtahmazli/Documents/166kargo/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js","/Users/naibtahmazli/Documents/166kargo/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","/Users/naibtahmazli/Documents/166kargo/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"names":[],"mappings":";;;;;AAAA,iBAAiB,mBAAO,CAAC,MAAsB;;;;;;;;;ACA/C;AAAA;AAAA;AAAA;AAAgD;AACtB;;AAE1B;AACA;AACA;AACA;AACA,sBAAsB,6DAAI;AAC1B;AACA;AACA,2BAA2B,6DAAI;AAC/B;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEe,6DAAI,E;;;;;;;;ACjBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8I;AAC5F;AAC8G;;AAEhK,0CAA0C,gCAAgC,oCAAoC,oDAAoD,8DAA8D,gEAAgE,EAAE,EAAE,gCAAgC,EAAE,aAAa;;AAEnV,gCAAgC,gBAAgB,sBAAsB,OAAO,uDAAuD,aAAa,uDAAuD,CAAC,sKAAe,2BAA2B,EAAE,EAAE,EAAE,6CAA6C,2EAA2E,EAAE,OAAO,iDAAiD,kFAAkF,EAAE,EAAE,EAAE,EAAE,eAAe;;AAE1f;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+KAAwB;;AAErC,sBAAsB,8DAAK;AAC3B;AACA;AACA;AACA,GAAG,WAAW;AACd;AACA,GAAG;AACH;;AAEe,wEAAe,E;;;;;;;;AC5B9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkJ;;AAElJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;AACzB,WAAW,QAAQ;;AAEnB;;AAEA;;AAEA;;AAEA,wDAAwD,OAAO;;AAE/D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO,QAAQ,EAAE;AACxC,oBAAoB;AACpB;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO,kBAAkB,gDAAgD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY,OAAO,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,gDAAgD,MAAM;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4DAAc;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,iFAAiF;AACjF;AACA;AACA,wDAAwD;AACxD,kDAAkD;AAClD,0EAA0E,wBAAwB,cAAc;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,0DAA0D;AACtF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,8CAA8C,4DAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,kBAAkB,sCAAsC,+DAA+D,KAAK,0BAA0B,GAAG;;AAE7L,iEAAiE,YAAY,QAAQ,yEAAyE;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe;AACf;AACA;AACA,yCAAyC;AACzC,uEAAuE;AACvE,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA,yCAAyC;AACzC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,2HAA2H;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+DAA+D,WAAW;AAC1E;;AAEA,qDAAqD,OAAO;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA,kBAAkB,kHAAkH,mEAAmE,KAAK;AAC5M,sBAAsB,oDAAM,GAAG;AAC/B,uCAAuC,oDAAM,GAAG;AAChD,gCAAgC,oDAAM,GAAG;AACzC,2BAA2B,oDAAM;AACjC,8BAA8B,oDAAM,GAAG;AACvC,uCAAuC,oDAAM,GAAG;AAChD,oCAAoC,oDAAM,GAAG;AAC7C,2BAA2B,oDAAM,GAAG;AACpC,6BAA6B,oDAAM;AACnC,sBAAsB,oDAAM;AAC5B,0BAA0B,oDAAM;AAChC,4BAA4B,oDAAM;AAClC,kCAAkC,oDAAM,GAAG;AAC3C,uCAAuC,oDAAM,GAAG;AAChD,uBAAuB,oDAAM;AAC7B,wBAAwB,oDAAM;AAC9B,+BAA+B,oDAAM;AACrC,oBAAoB,oDAAM;AAC1B,WAAW,wBAAwB;AACnC;AACA,sCAAsC,sDAAQ;AAC9C;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,kBAAkB;AAClB,KAAK;AACL,6BAA6B,oDAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,oDAAM;AAC/B,wBAAwB,oDAAM;AAC9B,WAAW,kEAAkE,GAAG,oDAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAW,YAAY;AACnD;AACA,iEAAiE;AACjE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,oCAAoC,yDAAW,+CAA+C;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,kCAAkC,qBAAqB,KAAK,KAAK,sBAAsB;AAC/J;AACA,KAAK;AACL,0BAA0B,yDAAW;AACrC,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,yDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mCAAmC,yDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B,yDAAW;AACzC,YAAY,KAAqC,EAAE,EAK1C;AACT;AACA;AACA;AACA,KAAK;AACL,8CAA8C,yDAAW;AACzD,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA,KAAK;AACL,oBAAoB,yDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL,8BAA8B,yDAAW,gBAAgB,8BAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,yDAAW;AACxC;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0EAA0E,iBAAiB,gBAAgB;AAC3G,qBAAqB;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA,6IAA6I;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW,wCAAwC;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,UAAU,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAW,mBAAmB;AAC3D;AACA;AACA;AACA,eAAe,SAAS,0EAA0E;AAClG;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL,qCAAqC,yDAAW;AAChD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B,yDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2CAA2C,yDAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,SAAS;AACT;AACA;AACA,kDAAkD;AAClD,6EAA6E,WAAW,MAAM;AAC9F;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,yDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,cAAc,mFAAmF,MAAM;AAC/L;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,YAAY,KAAqC,EAAE,EAU1C;AACT,eAAe,oBAAoB;AACnC,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB,6BAA6B,aAAa,EAAE,6BAA6B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6BAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,wBAAwB,4EAA4E;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E,gEAAgE;AAChE,6DAA6D;AAC7D;AACA;AACA,SAAS;AACT;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uDAAS;AACb;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAW;AAC7B,mBAAmB,yDAAW;AAC9B,kBAAkB,yDAAW;AAC7B,oBAAoB,yDAAW;AAC/B;AACA;AACA;AACA,wBAAwB,KAAqC,EAAE,EAI1C;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,oBAAoB,qDAAO,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,6BAA6B,yDAAW,0BAA0B,yDAAW,6BAA6B,yDAAW,0CAA0C;AAC/J;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,2DAAa;AACjC;AACA,6BAA6B,wDAAU;AACvC;AACA,SAAS,WAAW;AACpB,YAAY,2DAAa,wBAAwB,wBAAwB,UAAU;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,QAAQ,KAAqC,EAAE,EAe1C;AACL,iDAAiD,4CAA4C;AAC7F;AACA,wBAAwB,iCAAiC;AACzD;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL,0BAA0B,oDAAM;AAChC,sBAAsB,oDAAM;AAC5B,WAAW,2VAA2V;AACtW;AACA;AACA,kCAAkC,oDAAM;AACxC;AACA;AACA;AACA;AACA,gCAAgC,sDAAQ;AACxC;AACA,mDAAmD;AACnD;AACA;AACA,KAAK;AACL;AACA,+BAA+B,yDAAW;AAC1C,iJAAiJ;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,IAAI,uDAAS;AACb,YAAY,KAAqC,EAAE,EAI1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK,GAAG,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc,yDAAW;AACzB,cAAc,yDAAW;AACzB,iBAAiB,yDAAW;AAC5B,gBAAgB,yDAAW;AAC3B,gBAAgB,yDAAW;AAC3B,gBAAgB,yDAAW;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,+CAA+C;AACvE;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL,WAAW,mFAAmF,2CAA2C,4BAA4B,WAAW,+BAA+B,GAAG,4FAA4F;AAC9S;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sDAAQ;AAChD,qBAAqB,oDAAM;AAC3B,gBAAgB,oDAAM;AACtB;AACA,KAAK;AACL,uBAAuB,oDAAM;AAC7B;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAI1C;AACb,SAAS;AACT,2BAA2B,yDAAW,iDAAiD;AACvF;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAW;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL,0BAA0B,yDAAW;AACrC,YAAY,KAAqC,EAAE,EAI1C;AACT;AACA,qDAAqD,mCAAmC;AACxF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uDAAS;AACb,IAAI,uDAAS;AACb,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA,KAAK;AACL,IAAI,uDAAS;AACb;AACA,KAAK;AACL,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL,qBAAqB,yDAAW;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL,WAAW,kFAAkF;AAC7F,wBAAwB,sDAAQ;AAChC,kBAAkB,oDAAM;AACxB,4BAA4B,oDAAM;AAClC,IAAI,uDAAS;AACb,YAAY,KAAqC,EAAE,EAI1C;AACT;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,cAAc,wDAAwD,MAAM;AACtK;AACA;AACA;;AAEA;AACA,WAAW,oDAAoD;AAC/D,WAAW,cAAc;AACzB,yDAAyD;AACzD;AACA,UAAU,4DAAc;AACxB,cAAc,0DAAY;AAC1B,cAAc,2DAAa;AAC3B;AACA;AACA;AACA;;AAE+I;AAC/I;;;;;;;;;ACv4DA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA,C;;;;;;;;;;;;;ACbe;AACf;AACA;AACA;AACA;;AAEA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;;AAEA;AACA,C;;ACbmG;AACpF;AACf;AACA,eAAe,6BAA4B;AAC3C;;AAEA;AACA;;AAEA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,C","file":"x","sourcesContent":["module.exports = require('./dist/client/router')\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\n\nfunction Page(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      className = _ref.className;\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"page \".concat(className || ''),\n    style: style,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"container-fluid \",\n      children: children\n    })\n  });\n}\n\nexport default Page;","import _defineProperty from \"/Users/naibtahmazli/Documents/166kargo/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/Users/naibtahmazli/Documents/166kargo/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\n\nvar ButtonComponent = function ButtonComponent(_ref) {\n  var label = _ref.label,\n      startElement = _ref.startElement,\n      endElement = _ref.endElement,\n      className = _ref.className,\n      style = _ref.style,\n      Ref = _ref.Ref,\n      rest = _objectWithoutProperties(_ref, [\"label\", \"startElement\", \"endElement\", \"className\", \"style\", \"Ref\"]);\n\n  return /*#__PURE__*/_jsxs(\"button\", _objectSpread(_objectSpread({\n    className: \"btn \".concat(className || ''),\n    style: style,\n    ref: Ref\n  }, rest), {}, {\n    children: [startElement, label, endElement]\n  }));\n};\n\nexport default ButtonComponent;","import { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled, shouldKeepRawValue) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, valueAsNumber, valueAsDate, setValueAs, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return shouldKeepRawValue\r\n            ? value\r\n            : valueAsNumber\r\n                ? value === ''\r\n                    ? NaN\r\n                    : +value\r\n                : valueAsDate\r\n                    ? ref.valueAsDate\r\n                    : setValueAs\r\n                        ? setValueAs(value)\r\n                        : value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!ref.type || !fieldRef) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if (isRadioInput(ref) || isCheckBoxInput(ref)) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option = {}, index) => {\r\n                if ((isDetached(option.ref) && isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    if (!isValidElement(object1)) {\r\n        const keys1 = Object.keys(object1);\r\n        const keys2 = Object.keys(object2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n        for (const key of keys1) {\r\n            const val1 = object1[key];\r\n            if (!(isErrorObject && key === 'ref')) {\r\n                const val2 = object2[key];\r\n                if ((isObject(val1) || Array.isArray(val1)) &&\r\n                    (isObject(val2) || Array.isArray(val2))\r\n                    ? !deepEqual(val1, val2, isErrorObject)\r\n                    : val1 !== val2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                deepEqual(get(defaultValues[index] || {}, key), values[index][key])\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        parentNode &&\r\n            !dirtyFields.length &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields;\r\n}\r\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nvar isErrorStateChanged = ({ errors, name, error, validFields, fieldsWithValidation, }) => {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(value)) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef, false, true);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (rootPath, values, paths = []) => {\r\n    for (const property in values) {\r\n        const rootName = (rootPath +\r\n            (isObject(values)\r\n                ? `.${property}`\r\n                : `[${property}]`));\r\n        isPrimitive(values[property])\r\n            ? paths.push(rootName)\r\n            : getPath(rootName, values[property], paths);\r\n    }\r\n    return paths;\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value = undefined;\r\n    watchFields.add(fieldName);\r\n    if (!isEmptyObject(fieldValues)) {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\r\n    var _a;\r\n    let copy;\r\n    if (isPrimitive(data) ||\r\n        (isWeb && (data instanceof File || isHTMLElement(data)))) {\r\n        return data;\r\n    }\r\n    if (!['Set', 'Map', 'Object', 'Date', 'Array'].includes((_a = data.constructor) === null || _a === void 0 ? void 0 : _a.name)) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key)));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key]);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const fieldArrayDefaultValuesRef = useRef({});\r\n    const fieldArrayValuesRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const useWatchFieldsRef = useRef({});\r\n    const useWatchRenderFunctionsRef = useRef({});\r\n    const fieldsWithValidationRef = useRef({});\r\n    const validFieldsRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const shallowFieldsStateRef = useRef({});\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const contextRef = useRef(context);\r\n    const resolverRef = useRef(resolver);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const modeRef = useRef(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = useRef({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isValidating: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = useRef(formState);\r\n    const observerRef = useRef();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = useRef(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = useCallback((state = {}) => {\r\n        if (!isUnMount.current) {\r\n            formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n            setFormState(formStateRef.current);\r\n        }\r\n    }, []);\r\n    const updateIsValidating = () => readFormStateRef.current.isValidating &&\r\n        updateFormState({\r\n            isValidating: true,\r\n        });\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state) ||\r\n            readFormStateRef.current.isValidating) {\r\n            updateFormState(Object.assign(Object.assign(Object.assign({}, state), (resolverRef.current ? { isValid: !!isValid } : {})), { isValidating: false }));\r\n        }\r\n    }, []);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref)) {\r\n            (options || []).forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = useCallback((name, data) => {\r\n        if (readFormStateRef.current.isDirty) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = useCallback((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            isChanged && shouldRender && updateFormState(state);\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!fieldsRef.current[name]) {\r\n                console.warn('📋 Field is missing with `name` attribute: ', name);\r\n                return false;\r\n            }\r\n        }\r\n        const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n        shouldRenderBaseOnError(name, error, skipReRender);\r\n        return isUndefined(error);\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n                isValidating: false,\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = useCallback(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        updateIsValidating();\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState({\r\n                isValidating: false,\r\n            });\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = useCallback((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = useCallback((name, value, config) => {\r\n        !shouldUnregister &&\r\n            !isPrimitive(value) &&\r\n            set(shallowFieldsStateRef.current, name, Array.isArray(value) ? [...value] : Object.assign({}, value));\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n            config.shouldValidate && trigger(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                const parentName = getFieldArrayParentName(name) || name;\r\n                set(fieldArrayDefaultValuesRef.current, name, value);\r\n                resetFieldArrayFunctionRef.current[parentName]({\r\n                    [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name) => {\r\n        let found = true;\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config || {});\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) ||\r\n                    (!isBlurEvent && isFieldWatched(name));\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (!shouldUnregister && isCheckBoxInput(target)) {\r\n                    set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    !isBlurEvent && renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                updateIsValidating();\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = getFieldArrayParentName(name);\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    previousFormIsValid !== isValid && (shouldRender = true);\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                !isBlurEvent && renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\r\n    }\r\n    const validateResolver = useCallback(async (values = {}) => {\r\n        const newDefaultValues = isEmptyObject(fieldsRef.current)\r\n            ? defaultValuesRef.current\r\n            : {};\r\n        const { errors } = (await resolverRef.current(Object.assign(Object.assign(Object.assign({}, newDefaultValues), getValues()), values), contextRef.current, isValidateAllFieldCriteria)) || {};\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\r\n        if (shouldUnregister) {\r\n            unset(validFieldsRef.current, field.ref.name);\r\n            unset(fieldsWithValidationRef.current, field.ref.name);\r\n        }\r\n    }, [shouldUnregister]);\r\n    const updateWatchedValue = useCallback((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    isDirty: isFormDirty(),\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            const parentNodeName = getFieldArrayParentName(fieldNames) || fieldNames;\r\n            if (fieldArrayNamesRef.current.has(parentNodeName)) {\r\n                fieldValues = Object.assign(Object.assign({}, fieldArrayValuesRef.current), fieldValues);\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames))\r\n                ? defaultValue\r\n                : get(defaultValuesRef.current, fieldNames), true);\r\n        }\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, options = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!ref.name) {\r\n                return console.warn('📋 Field is missing `name` attribute', ref, `https://react-hook-form.com/api#useForm`);\r\n            }\r\n            if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\r\n                !RegExp(`^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\r\n                    .replace(/\\[/g, '\\\\[')\r\n                    .replace(/\\]/g, '\\\\]')).test(ref.name)) {\r\n                return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, options);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), options);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, options) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    previousFormIsValid !== isEmptyObject(error) && updateFormState();\r\n                });\r\n            }\r\n        }\r\n        if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrRegisterOptions, options) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrRegisterOptions)) {\r\n                registerFieldRef({ name: refOrRegisterOptions }, options);\r\n            }\r\n            else if (isObject(refOrRegisterOptions) &&\r\n                'name' in refOrRegisterOptions) {\r\n                registerFieldRef(refOrRegisterOptions, options);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = useCallback((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { name } = field.ref;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = Object.assign({}, (values || defaultValuesRef.current));\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values || defaultValuesRef.current);\r\n        resetRefs(omitResetState);\r\n    };\r\n    useEffect(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    useEffect(() => () => {\r\n        observerRef.current && observerRef.current.disconnect();\r\n        isUnMount.current = true;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            return;\r\n        }\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: useCallback(setValue, [setInternalValue, trigger]),\r\n        getValues: useCallback(getValues, []),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        if (prop === 'isValid' && isOnSubmit) {\r\n                            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\r\n                        }\r\n                    }\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = useMemo(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearErrors: useCallback(clearErrors, []), setError: useCallback(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = createContext(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => useContext(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (createElement(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort((a, b) => a - b));\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data) => {\r\n    if (isObject(data)) {\r\n        const object = {};\r\n        for (const key in data) {\r\n            object[key] = true;\r\n        }\r\n        return object;\r\n    }\r\n    return true;\r\n});\n\nconst mapIds = (values = [], keyName, skipWarn) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!skipWarn) {\r\n            for (const value of values) {\r\n                if (typeof value === 'object') {\r\n                    if (keyName in value) {\r\n                        console.warn(`📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    console.warn(`📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return values.map((value) => (Object.assign({ [keyName]: value[keyName] || generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\r\n        }\r\n    }\r\n    const focusIndexRef = useRef(-1);\r\n    const isUnMount = useRef(false);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const getDefaultValues = (values) => get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = useRef([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? getDefaultValues(fieldArrayDefaultValuesRef.current)\r\n            : getDefaultValues(defaultValuesRef.current)),\r\n    ]);\r\n    const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const omitKey = (fields) => fields.map((_a = {}) => {\r\n        var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n        return rest;\r\n    });\r\n    fieldArrayNamesRef.current.add(name);\r\n    const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), [name]);\r\n    const getCurrentFieldsValues = () => mapIds(get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item))), keyName, true);\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n                delete fieldsRef.current[key];\r\n            }\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        if (updatedFieldArrayValues) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFormValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        if (!isUnMount.current && readFormStateRef.current.isDirty) {\r\n            updateFormState({\r\n                isDirty: isFormDirty(name, omitKey(updatedFormValues)),\r\n            });\r\n        }\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const appendValue = Array.isArray(value) ? value : [value];\r\n        const updateFormValues = [\r\n            ...getCurrentFieldsValues(),\r\n            ...mapIds(appendValue, keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                ...cloneObject(appendValue),\r\n            ]);\r\n        focusIndexRef.current = shouldFocus\r\n            ? get(fieldArrayValuesRef.current, name).length - 1\r\n            : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                if (!isUnMount.current) {\r\n                    setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n                }\r\n            };\r\n        }\r\n        return () => {\r\n            isUnMount.current = true;\r\n            shouldUnregister && remove();\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef.current, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nfunction useController({ name, rules, defaultValue, control, onFocus, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\r\n        }\r\n    }\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formState, formStateRef: { current: { isSubmitted, touched, errors }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = useState(getInitialValue());\r\n    const valueRef = useRef(value);\r\n    const ref = useRef({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = useRef(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (!isFunction(ref.current.focus)) {\r\n                    console.warn(`📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);\r\n                }\r\n            }\r\n        }));\r\n    const shouldValidate = useCallback((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = useCallback(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = useCallback((shouldUpdateValue) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperties({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, {\r\n                value: {\r\n                    set(data) {\r\n                        setInputStateValue(data);\r\n                        valueRef.current = data;\r\n                    },\r\n                    get() {\r\n                        return valueRef.current;\r\n                    },\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    useEffect(() => () => unregister(name), [name]);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (isUndefined(value)) {\r\n                console.warn(`📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);\r\n            }\r\n            if (!isNotFieldArray && isUndefined(defaultValue)) {\r\n                console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        registerField();\r\n    }, [registerField]);\r\n    useEffect(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = useCallback(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\r\n    const onChange = useCallback((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    return {\r\n        field: {\r\n            onChange,\r\n            onBlur,\r\n            name,\r\n            value,\r\n            ref,\r\n        },\r\n        meta: Object.defineProperties({\r\n            invalid: !!get(errors, name),\r\n        }, {\r\n            isDirty: {\r\n                get() {\r\n                    return !!get(formState.dirtyFields, name);\r\n                },\r\n            },\r\n            isTouched: {\r\n                get() {\r\n                    return !!get(formState.touched, name);\r\n                },\r\n            },\r\n        }),\r\n    };\r\n}\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\r\n        }\r\n    }\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = useState()[1];\r\n    const idRef = useRef();\r\n    const defaultValueRef = useRef(defaultValue);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (name === '') {\r\n                console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\r\n            }\r\n        }\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nconst Controller = (props) => {\r\n    const { rules, as, render, defaultValue, control, onFocus } = props, rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const { field, meta } = useController(props);\r\n    const componentProps = Object.assign(Object.assign({}, rest), field);\r\n    return as\r\n        ? isValidElement(as)\r\n            ? cloneElement(as, componentProps)\r\n            : createElement(as, componentProps)\r\n        : render\r\n            ? render(field, meta)\r\n            : null;\r\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useController, useFieldArray, useForm, useFormContext, useWatch };\n//# sourceMappingURL=index.esm.js.map\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"]}}